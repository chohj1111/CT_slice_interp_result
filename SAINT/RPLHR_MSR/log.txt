DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 30.3778 SSIM: 0.8823 (Best: 30.3778 0.8823 @epoch 1)
Total time: 3591.14s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 34.8215 SSIM: 0.9200 (Best: 34.8215 0.9200 @epoch 9)
Total time: 3630.50s

[Epoch 11]	Learning rate: 1.00e-4

Evaluation:
[Epoch 12]	Learning rate: 1.00e-4

Evaluation:
[Epoch 13]	Learning rate: 1.00e-4

Evaluation:
[Epoch 14]	Learning rate: 1.00e-4

Evaluation:
[Epoch 15]	Learning rate: 1.00e-4

Evaluation:
[Epoch 16]	Learning rate: 1.00e-4

Evaluation:
[Epoch 17]	Learning rate: 1.00e-4

Evaluation:
[Epoch 18]	Learning rate: 1.00e-4

Evaluation:
[Epoch 19]	Learning rate: 1.00e-4

Evaluation:
[Epoch 20]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 36.0076 SSIM: 0.9303 (Best: 36.0076 0.9303 @epoch 19)
Total time: 3624.18s

[Epoch 21]	Learning rate: 1.00e-4

Evaluation:
[Epoch 22]	Learning rate: 1.00e-4

Evaluation:
[Epoch 23]	Learning rate: 1.00e-4

Evaluation:
[Epoch 24]	Learning rate: 1.00e-4

Evaluation:
[Epoch 25]	Learning rate: 1.00e-4

Evaluation:
[Epoch 26]	Learning rate: 1.00e-4

Evaluation:
[Epoch 27]	Learning rate: 1.00e-4

Evaluation:
[Epoch 28]	Learning rate: 1.00e-4

Evaluation:
[Epoch 29]	Learning rate: 1.00e-4

Evaluation:
[Epoch 30]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 36.6134 SSIM: 0.9376 (Best: 36.6134 0.9376 @epoch 29)
Total time: 3710.10s

[Epoch 31]	Learning rate: 1.00e-4

Evaluation:
[Epoch 32]	Learning rate: 1.00e-4

Evaluation:
[Epoch 33]	Learning rate: 1.00e-4

Evaluation:
[Epoch 34]	Learning rate: 1.00e-4

Evaluation:
[Epoch 35]	Learning rate: 1.00e-4

Evaluation:
[Epoch 36]	Learning rate: 1.00e-4

Evaluation:
[Epoch 37]	Learning rate: 1.00e-4

Evaluation:
[Epoch 38]	Learning rate: 1.00e-4

Evaluation:
[Epoch 39]	Learning rate: 1.00e-4

Evaluation:
[Epoch 40]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 36.9719 SSIM: 0.9402 (Best: 36.9719 0.9402 @epoch 39)
Total time: 3674.00s

[Epoch 41]	Learning rate: 1.00e-4

Evaluation:
[Epoch 42]	Learning rate: 1.00e-4

Evaluation:
[Epoch 43]	Learning rate: 1.00e-4

Evaluation:
[Epoch 44]	Learning rate: 1.00e-4

Evaluation:
[Epoch 45]	Learning rate: 1.00e-4

Evaluation:
[Epoch 46]	Learning rate: 1.00e-4

Evaluation:
[Epoch 47]	Learning rate: 1.00e-4

Evaluation:
[Epoch 48]	Learning rate: 1.00e-4

Evaluation:
[Epoch 49]	Learning rate: 1.00e-4

Evaluation:
[Epoch 50]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.1028 SSIM: 0.9414 (Best: 37.1028 0.9414 @epoch 49)
Total time: 3638.25s

[Epoch 51]	Learning rate: 1.00e-4

Evaluation:
[Epoch 52]	Learning rate: 1.00e-4

Evaluation:
[Epoch 53]	Learning rate: 1.00e-4

Evaluation:
[Epoch 54]	Learning rate: 1.00e-4

Evaluation:
[Epoch 55]	Learning rate: 1.00e-4

Evaluation:
[Epoch 56]	Learning rate: 1.00e-4

Evaluation:
[Epoch 57]	Learning rate: 1.00e-4

Evaluation:
[Epoch 58]	Learning rate: 1.00e-4

Evaluation:
[Epoch 59]	Learning rate: 1.00e-4

Evaluation:
[Epoch 60]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.2625 SSIM: 0.9426 (Best: 37.2625 0.9426 @epoch 59)
Total time: 3659.95s

[Epoch 61]	Learning rate: 1.00e-4

Evaluation:
[Epoch 62]	Learning rate: 1.00e-4

Evaluation:
[Epoch 63]	Learning rate: 1.00e-4

Evaluation:
[Epoch 64]	Learning rate: 1.00e-4

Evaluation:
[Epoch 65]	Learning rate: 1.00e-4

Evaluation:
[Epoch 66]	Learning rate: 1.00e-4

Evaluation:
[Epoch 67]	Learning rate: 1.00e-4

Evaluation:
[Epoch 68]	Learning rate: 1.00e-4

Evaluation:
[Epoch 69]	Learning rate: 1.00e-4

Evaluation:
[Epoch 70]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.1767 SSIM: 0.9427 (Best: 37.2625 0.9426 @epoch 59)
Total time: 3626.38s

DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 31.3537 SSIM: 0.8870 (Best: 31.3537 0.8870 @epoch 1)
Total time: 3584.89s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 34.9218 SSIM: 0.9205 (Best: 34.9218 0.9205 @epoch 9)
Total time: 3596.04s

DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 30.3946 SSIM: 0.8813 (Best: 30.3946 0.8813 @epoch 1)
Total time: 3506.30s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 34.8689 SSIM: 0.9203 (Best: 34.8689 0.9203 @epoch 9)
Total time: 3534.49s

[Epoch 11]	Learning rate: 1.00e-4

Evaluation:
[Epoch 12]	Learning rate: 1.00e-4

Evaluation:
[Epoch 13]	Learning rate: 1.00e-4

Evaluation:
[Epoch 14]	Learning rate: 1.00e-4

Evaluation:
[Epoch 15]	Learning rate: 1.00e-4

Evaluation:
[Epoch 16]	Learning rate: 1.00e-4

Evaluation:
[Epoch 17]	Learning rate: 1.00e-4

Evaluation:
[Epoch 18]	Learning rate: 1.00e-4

Evaluation:
[Epoch 19]	Learning rate: 1.00e-4

Evaluation:
[Epoch 20]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 35.7248 SSIM: 0.9308 (Best: 35.7248 0.9308 @epoch 19)
Total time: 3519.48s

[Epoch 21]	Learning rate: 1.00e-4

Evaluation:
[Epoch 22]	Learning rate: 1.00e-4

Evaluation:
[Epoch 23]	Learning rate: 1.00e-4

Evaluation:
[Epoch 24]	Learning rate: 1.00e-4

Evaluation:
[Epoch 25]	Learning rate: 1.00e-4

Evaluation:
[Epoch 26]	Learning rate: 1.00e-4

Evaluation:
[Epoch 27]	Learning rate: 1.00e-4

Evaluation:
[Epoch 28]	Learning rate: 1.00e-4

Evaluation:
[Epoch 29]	Learning rate: 1.00e-4

Evaluation:
[Epoch 30]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 36.7271 SSIM: 0.9375 (Best: 36.7271 0.9375 @epoch 29)
Total time: 3524.75s

[Epoch 31]	Learning rate: 1.00e-4

Evaluation:
[Epoch 32]	Learning rate: 1.00e-4

Evaluation:
[Epoch 33]	Learning rate: 1.00e-4

Evaluation:
[Epoch 34]	Learning rate: 1.00e-4

Evaluation:
[Epoch 35]	Learning rate: 1.00e-4

Evaluation:
[Epoch 36]	Learning rate: 1.00e-4

Evaluation:
[Epoch 37]	Learning rate: 1.00e-4

Evaluation:
[Epoch 38]	Learning rate: 1.00e-4

Evaluation:
[Epoch 39]	Learning rate: 1.00e-4

Evaluation:
[Epoch 40]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.0140 SSIM: 0.9400 (Best: 37.0140 0.9400 @epoch 39)
Total time: 3496.33s

[Epoch 41]	Learning rate: 1.00e-4

Evaluation:
[Epoch 42]	Learning rate: 1.00e-4

Evaluation:
[Epoch 43]	Learning rate: 1.00e-4

Evaluation:
[Epoch 44]	Learning rate: 1.00e-4

Evaluation:
[Epoch 45]	Learning rate: 1.00e-4

Evaluation:
[Epoch 46]	Learning rate: 1.00e-4

Evaluation:
[Epoch 47]	Learning rate: 1.00e-4

Evaluation:
[Epoch 48]	Learning rate: 1.00e-4

Evaluation:
[Epoch 49]	Learning rate: 1.00e-4

Evaluation:
[Epoch 50]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.0446 SSIM: 0.9414 (Best: 37.0446 0.9414 @epoch 49)
Total time: 3505.35s

[Epoch 51]	Learning rate: 1.00e-4

Evaluation:
[Epoch 52]	Learning rate: 1.00e-4

Evaluation:
[Epoch 53]	Learning rate: 1.00e-4

Evaluation:
[Epoch 54]	Learning rate: 1.00e-4

Evaluation:
[Epoch 55]	Learning rate: 1.00e-4

Evaluation:
[Epoch 56]	Learning rate: 1.00e-4

Evaluation:
[Epoch 57]	Learning rate: 1.00e-4

Evaluation:
[Epoch 58]	Learning rate: 1.00e-4

Evaluation:
[Epoch 59]	Learning rate: 1.00e-4

Evaluation:
[Epoch 60]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 36.7446 SSIM: 0.9424 (Best: 37.0446 0.9414 @epoch 49)
Total time: 3502.52s

[Epoch 61]	Learning rate: 1.00e-4

Evaluation:
[Epoch 62]	Learning rate: 1.00e-4

Evaluation:
[Epoch 63]	Learning rate: 1.00e-4

Evaluation:
[Epoch 64]	Learning rate: 1.00e-4

Evaluation:
[Epoch 65]	Learning rate: 1.00e-4

Evaluation:
[Epoch 66]	Learning rate: 1.00e-4

Evaluation:
[Epoch 67]	Learning rate: 1.00e-4

Evaluation:
[Epoch 68]	Learning rate: 1.00e-4

Evaluation:
[Epoch 69]	Learning rate: 1.00e-4

Evaluation:
[Epoch 70]	Learning rate: 1.00e-4

Evaluation:
[TEST x5]	PSNR: 37.2996 SSIM: 0.9433 (Best: 37.2996 0.9433 @epoch 69)
Total time: 3498.40s

DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
[24000/50000]	[L1: 103.4878]	76.3+56.4s
[48000/50000]	[L1: 73.1425]	69.3+53.7s

Evaluation:
[TEST x5]	PSNR: 34.6473 SSIM: 0.9169 (Best: 34.6473 0.9169 @epoch 1)
Total time: 3547.79s

[Epoch 3]	Learning rate: 1.00e-4
[24000/50000]	[L1: 40.4751]	68.7+50.6s
[48000/50000]	[L1: 38.4216]	69.2+52.2s

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4
[24000/50000]	[L1: 35.2882]	69.2+27.9s
[48000/50000]	[L1: 35.0653]	69.4+28.1s

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4
[24000/50000]	[L1: 33.8318]	69.5+25.5s
[48000/50000]	[L1: 33.4872]	69.7+25.3s

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4
[24000/50000]	[L1: 32.5863]	69.6+25.4s
[48000/50000]	[L1: 32.3955]	69.7+25.5s

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4
[24000/50000]	[L1: 31.6085]	69.5+25.4s
[48000/50000]	[L1: 31.5013]	69.7+25.4s

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4
[24000/50000]	[L1: 31.1856]	69.6+25.4s
[48000/50000]	[L1: 31.0418]	69.7+25.3s

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4
[24000/50000]	[L1: 30.6035]	69.6+25.4s
[48000/50000]	[L1: 30.4766]	69.7+25.4s

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4
[24000/50000]	[L1: 30.0118]	69.6+25.3s
[48000/50000]	[L1: 30.4565]	69.7+25.4s

Evaluation:
[TEST x5]	PSNR: 36.9317 SSIM: 0.9406 (Best: 36.9317 0.9406 @epoch 9)
Total time: 3705.56s

[Epoch 11]	Learning rate: 1.00e-4
[24000/50000]	[L1: 30.0423]	68.8+30.4s
[48000/50000]	[L1: 29.6750]	69.2+30.0s

Evaluation:
[Epoch 12]	Learning rate: 1.00e-4
[24000/50000]	[L1: 29.1511]	69.3+25.3s
[48000/50000]	[L1: 29.2321]	69.3+25.5s

Evaluation:
[Epoch 13]	Learning rate: 1.00e-4
[24000/50000]	[L1: 29.0353]	69.5+25.4s
[48000/50000]	[L1: 28.9346]	69.6+25.4s

Evaluation:
[Epoch 14]	Learning rate: 1.00e-4
[24000/50000]	[L1: 28.9258]	69.5+25.7s
[48000/50000]	[L1: 28.7653]	69.6+25.5s

Evaluation:
[Epoch 15]	Learning rate: 1.00e-4
[24000/50000]	[L1: 28.7363]	69.7+25.5s
[48000/50000]	[L1: 28.6702]	69.6+25.3s

Evaluation:
[Epoch 16]	Learning rate: 1.00e-4
[24000/50000]	[L1: 28.5740]	69.7+25.4s
[48000/50000]	[L1: 28.3686]	69.6+25.4s

Evaluation:
[Epoch 17]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.8860]	69.8+25.3s
[48000/50000]	[L1: 28.0365]	69.7+25.4s

Evaluation:
[Epoch 18]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.7224]	69.8+25.5s
[48000/50000]	[L1: 27.6850]	69.8+25.4s

Evaluation:
[Epoch 19]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.8157]	69.6+25.5s
[48000/50000]	[L1: 27.6567]	69.7+25.5s

Evaluation:
[Epoch 20]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.6884]	69.7+25.4s
[48000/50000]	[L1: 27.5971]	69.3+25.5s

Evaluation:
[TEST x5]	PSNR: 37.4653 SSIM: 0.9448 (Best: 37.4653 0.9448 @epoch 19)
Total time: 3601.54s

[Epoch 21]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.4249]	69.0+32.9s
[48000/50000]	[L1: 27.3589]	69.1+32.6s

Evaluation:
[Epoch 22]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.9884]	69.1+25.5s
[48000/50000]	[L1: 27.5414]	69.4+25.4s

Evaluation:
[Epoch 23]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.2384]	69.4+25.5s
[48000/50000]	[L1: 27.1952]	69.6+25.4s

Evaluation:
[Epoch 24]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.0227]	69.6+25.4s
[48000/50000]	[L1: 27.0181]	69.5+25.5s

Evaluation:
[Epoch 25]	Learning rate: 1.00e-4
[24000/50000]	[L1: 27.0904]	69.5+25.4s
[48000/50000]	[L1: 27.0890]	69.7+25.3s

Evaluation:
[Epoch 26]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.8020]	69.8+25.5s
[48000/50000]	[L1: 26.8443]	69.9+25.4s

Evaluation:
[Epoch 27]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.9397]	69.9+25.4s
[48000/50000]	[L1: 26.8542]	69.9+25.3s

Evaluation:
[Epoch 28]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.6994]	70.0+25.4s
[48000/50000]	[L1: 26.6551]	70.0+25.5s

Evaluation:
[Epoch 29]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.4761]	69.9+25.5s
[48000/50000]	[L1: 26.5117]	69.9+25.4s

Evaluation:
[Epoch 30]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.5568]	69.9+25.6s
[48000/50000]	[L1: 26.4496]	70.0+25.4s

Evaluation:
[TEST x5]	PSNR: 37.6562 SSIM: 0.9465 (Best: 37.6562 0.9465 @epoch 29)
Total time: 3596.10s

[Epoch 31]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.4534]	68.7+35.0s
[48000/50000]	[L1: 26.4510]	69.2+35.2s

Evaluation:
[Epoch 32]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.7697]	69.6+25.5s
[48000/50000]	[L1: 26.5245]	69.7+25.3s

Evaluation:
[Epoch 33]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.2438]	69.8+25.5s
[48000/50000]	[L1: 26.2955]	69.6+25.4s

Evaluation:
[Epoch 34]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.2502]	69.5+25.5s
[48000/50000]	[L1: 26.1871]	69.7+25.4s

Evaluation:
[Epoch 35]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.2268]	69.5+25.4s
[48000/50000]	[L1: 26.1498]	69.7+25.3s

Evaluation:
[Epoch 36]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.1564]	69.6+25.5s
[48000/50000]	[L1: 26.0767]	69.7+25.4s

Evaluation:
[Epoch 37]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.1559]	69.5+25.4s
[48000/50000]	[L1: 26.0999]	69.7+25.4s

Evaluation:
[Epoch 38]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.0291]	69.6+25.5s
[48000/50000]	[L1: 25.9861]	69.7+25.5s

Evaluation:
[Epoch 39]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.9704]	69.7+25.3s
[48000/50000]	[L1: 25.9424]	69.5+25.4s

Evaluation:
[Epoch 40]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.9923]	69.7+25.5s
[48000/50000]	[L1: 25.8705]	69.7+25.3s

Evaluation:
[TEST x5]	PSNR: 37.7317 SSIM: 0.9475 (Best: 37.7317 0.9475 @epoch 39)
Total time: 3570.81s

[Epoch 41]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.2639]	68.8+33.3s
[48000/50000]	[L1: 25.9666]	69.0+33.9s

Evaluation:
[Epoch 42]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.8868]	69.2+25.2s
[48000/50000]	[L1: 25.8241]	69.3+25.4s

Evaluation:
[Epoch 43]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.7613]	69.4+25.5s
[48000/50000]	[L1: 25.7192]	69.5+25.3s

Evaluation:
[Epoch 44]	Learning rate: 1.00e-4
[24000/50000]	[L1: 26.0196]	69.3+25.3s
[48000/50000]	[L1: 25.8330]	69.6+25.5s

Evaluation:
[Epoch 45]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.4870]	69.6+25.4s
[48000/50000]	[L1: 25.7254]	69.6+25.3s

Evaluation:
[Epoch 46]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.5800]	69.6+25.3s
[48000/50000]	[L1: 25.5848]	69.6+25.5s

Evaluation:
[Epoch 47]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.5375]	69.6+25.4s
[48000/50000]	[L1: 25.5473]	69.7+25.5s

Evaluation:
[Epoch 48]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.5149]	69.6+25.6s
[48000/50000]	[L1: 25.5911]	69.5+25.4s

Evaluation:
[Epoch 49]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.3371]	69.8+25.5s
[48000/50000]	[L1: 25.4059]	69.8+25.3s

Evaluation:
[Epoch 50]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.3400]	69.5+25.4s
[48000/50000]	[L1: 25.2943]	69.7+25.5s

Evaluation:
[TEST x5]	PSNR: 37.9108 SSIM: 0.9487 (Best: 37.9108 0.9487 @epoch 49)
Total time: 3600.51s

[Epoch 51]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.2675]	68.9+31.8s
[48000/50000]	[L1: 25.3097]	69.1+31.6s

Evaluation:
[Epoch 52]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.4852]	69.3+25.5s
[48000/50000]	[L1: 25.3509]	69.3+25.6s

Evaluation:
[Epoch 53]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.2896]	69.5+25.6s
[48000/50000]	[L1: 25.3378]	69.7+25.6s

Evaluation:
[Epoch 54]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.3208]	69.6+25.4s
[48000/50000]	[L1: 25.1635]	69.6+25.6s

Evaluation:
[Epoch 55]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.1452]	69.5+25.5s
[48000/50000]	[L1: 25.1196]	69.8+25.4s

Evaluation:
[Epoch 56]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.4344]	69.6+25.5s
[48000/50000]	[L1: 25.2494]	69.6+25.6s

Evaluation:
[Epoch 57]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.1213]	69.7+25.5s
[48000/50000]	[L1: 25.1490]	69.7+25.5s

Evaluation:
[Epoch 58]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.0169]	69.5+25.4s
[48000/50000]	[L1: 25.0562]	69.7+25.5s

Evaluation:
[Epoch 59]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.0169]	69.8+25.5s
[48000/50000]	[L1: 24.9857]	69.5+25.7s

Evaluation:
[Epoch 60]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.9584]	69.6+25.5s
[48000/50000]	[L1: 25.0400]	69.6+25.4s

Evaluation:
[TEST x5]	PSNR: 37.9459 SSIM: 0.9489 (Best: 37.9459 0.9489 @epoch 59)
Total time: 3588.90s

[Epoch 61]	Learning rate: 1.00e-4
[24000/50000]	[L1: 25.1203]	68.8+34.2s
[48000/50000]	[L1: 25.0707]	69.2+34.1s

Evaluation:
[Epoch 62]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.9044]	69.3+25.5s
[48000/50000]	[L1: 24.8777]	69.5+25.4s

Evaluation:
[Epoch 63]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.9165]	69.7+25.4s
[48000/50000]	[L1: 24.8745]	69.7+25.4s

Evaluation:
[Epoch 64]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.8779]	69.6+25.4s
[48000/50000]	[L1: 24.8325]	69.4+25.5s

Evaluation:
[Epoch 65]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.7573]	69.3+25.5s
[48000/50000]	[L1: 24.8466]	69.4+25.5s

Evaluation:
[Epoch 66]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.7761]	69.4+25.4s
[48000/50000]	[L1: 24.8008]	69.4+25.4s

Evaluation:
[Epoch 67]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.7180]	69.4+25.6s
[48000/50000]	[L1: 24.6890]	69.4+25.5s

Evaluation:
[Epoch 68]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.7241]	69.3+25.3s
[48000/50000]	[L1: 24.7876]	69.4+25.5s

Evaluation:
[Epoch 69]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.8380]	69.3+25.4s
[48000/50000]	[L1: 24.7251]	69.4+25.5s

Evaluation:
[Epoch 70]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.6337]	69.4+25.6s
[48000/50000]	[L1: 24.5685]	69.5+25.5s

Evaluation:
[TEST x5]	PSNR: 38.1157 SSIM: 0.9498 (Best: 38.1157 0.9498 @epoch 69)
Total time: 3625.73s

[Epoch 71]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5410]	68.9+31.2s
[48000/50000]	[L1: 24.5981]	69.3+31.5s

Evaluation:
[Epoch 72]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.6732]	69.7+25.4s
[48000/50000]	[L1: 24.6364]	70.0+25.6s

Evaluation:
[Epoch 73]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5581]	70.1+25.5s
[48000/50000]	[L1: 24.6336]	70.3+25.4s

Evaluation:
[Epoch 74]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.6256]	70.2+25.5s
[48000/50000]	[L1: 24.5846]	70.2+25.6s

Evaluation:
[Epoch 75]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4944]	70.0+25.4s
[48000/50000]	[L1: 24.5019]	70.3+25.6s

Evaluation:
[Epoch 76]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5814]	70.3+25.6s
[48000/50000]	[L1: 24.5065]	70.2+25.5s

Evaluation:
[Epoch 77]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.6062]	70.3+25.5s
[48000/50000]	[L1: 24.6167]	70.2+25.5s

Evaluation:
[Epoch 78]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5869]	70.1+25.5s
[48000/50000]	[L1: 24.5129]	70.3+25.4s

Evaluation:
[Epoch 79]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4961]	70.2+25.6s
[48000/50000]	[L1: 24.4451]	70.4+25.5s

Evaluation:
[Epoch 80]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5334]	70.3+25.5s
[48000/50000]	[L1: 24.4402]	70.3+25.5s

Evaluation:
[TEST x5]	PSNR: 38.1003 SSIM: 0.9500 (Best: 38.1157 0.9498 @epoch 69)
Total time: 3601.65s

[Epoch 81]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.5296]	69.0+35.8s
[48000/50000]	[L1: 24.4496]	69.3+35.5s

Evaluation:
[Epoch 82]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4806]	69.6+25.5s
[48000/50000]	[L1: 24.5177]	70.0+25.5s

Evaluation:
[Epoch 83]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.2772]	70.2+25.5s
[48000/50000]	[L1: 24.3258]	70.1+25.4s

Evaluation:
[Epoch 84]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.3792]	70.2+25.6s
[48000/50000]	[L1: 24.3265]	70.2+25.5s

Evaluation:
[Epoch 85]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4179]	70.1+25.5s
[48000/50000]	[L1: 24.3725]	70.1+25.4s

Evaluation:
[Epoch 86]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.1498]	70.1+25.5s
[48000/50000]	[L1: 24.3705]	70.1+25.4s

Evaluation:
[Epoch 87]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.3139]	70.2+25.4s
[48000/50000]	[L1: 24.2763]	70.0+25.6s

Evaluation:
[Epoch 88]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4125]	70.1+25.6s
[48000/50000]	[L1: 24.3540]	70.1+25.4s

Evaluation:
[Epoch 89]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.7130]	70.2+25.4s
[48000/50000]	[L1: 24.3792]	70.2+25.4s

Evaluation:
[Epoch 90]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.2391]	70.1+25.4s
[48000/50000]	[L1: 24.5376]	70.0+25.4s

Evaluation:
[TEST x5]	PSNR: 38.2162 SSIM: 0.9503 (Best: 38.2162 0.9503 @epoch 89)
Total time: 3650.54s

[Epoch 91]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.1363]	68.8+36.1s
[48000/50000]	[L1: 24.4566]	69.4+36.2s

Evaluation:
[Epoch 92]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.6307]	69.6+25.4s
[48000/50000]	[L1: 24.5963]	69.7+25.5s

Evaluation:
[Epoch 93]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4786]	69.8+25.5s
[48000/50000]	[L1: 24.4216]	69.6+25.4s

Evaluation:
[Epoch 94]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4079]	69.5+25.5s
[48000/50000]	[L1: 24.4084]	69.5+25.5s

Evaluation:
[Epoch 95]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.4222]	69.4+25.4s
[48000/50000]	[L1: 24.3277]	69.5+25.5s

Evaluation:
[Epoch 96]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.2920]	69.5+25.6s
[48000/50000]	[L1: 24.2459]	69.5+25.4s

Evaluation:
[Epoch 97]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.2898]	69.5+25.4s
[48000/50000]	[L1: 24.2268]	69.6+25.6s

Evaluation:
[Epoch 98]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.1921]	69.4+25.5s
[48000/50000]	[L1: 24.1368]	69.4+25.4s

Evaluation:
[Epoch 99]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.1634]	69.4+25.3s
[48000/50000]	[L1: 24.1831]	69.5+25.5s

Evaluation:
[Epoch 100]	Learning rate: 1.00e-4
[24000/50000]	[L1: 24.0782]	69.5+25.4s
[48000/50000]	[L1: 24.0858]	69.4+25.4s

Evaluation:
[TEST x5]	PSNR: 38.1982 SSIM: 0.9506 (Best: 38.2162 0.9503 @epoch 89)
Total time: 3646.45s

[Epoch 101]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6562]	68.9+33.1s
[48000/50000]	[L1: 23.6061]	69.2+33.0s

Evaluation:
[Epoch 102]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5694]	69.4+25.5s
[48000/50000]	[L1: 23.5881]	69.9+25.4s

Evaluation:
[Epoch 103]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6417]	69.9+25.5s
[48000/50000]	[L1: 23.6172]	70.0+25.3s

Evaluation:
[Epoch 104]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.7614]	70.0+25.5s
[48000/50000]	[L1: 23.6924]	69.9+25.4s

Evaluation:
[Epoch 105]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6513]	70.0+25.5s
[48000/50000]	[L1: 23.6381]	70.2+25.5s

Evaluation:
[Epoch 106]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6784]	70.1+25.4s
[48000/50000]	[L1: 23.6009]	70.1+25.5s

Evaluation:
[Epoch 107]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6450]	70.2+25.5s
[48000/50000]	[L1: 23.6063]	70.2+25.5s

Evaluation:
[Epoch 108]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5594]	70.1+25.4s
[48000/50000]	[L1: 23.6001]	70.1+25.5s

Evaluation:
[Epoch 109]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.7974]	69.9+25.4s
[48000/50000]	[L1: 23.7981]	69.9+25.5s

Evaluation:
[Epoch 110]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.7264]	69.8+25.3s
[48000/50000]	[L1: 23.7233]	69.9+25.5s

Evaluation:
[TEST x5]	PSNR: 38.2123 SSIM: 0.9505 (Best: 38.2162 0.9503 @epoch 89)
Total time: 3669.82s

[Epoch 111]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.7454]	68.9+32.5s
[48000/50000]	[L1: 23.6855]	69.5+32.1s

Evaluation:
[Epoch 112]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6295]	69.7+25.4s
[48000/50000]	[L1: 23.5257]	69.7+25.6s

Evaluation:
[Epoch 113]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5582]	69.7+25.5s
[48000/50000]	[L1: 23.6419]	69.8+25.5s

Evaluation:
[Epoch 114]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6682]	69.8+25.4s
[48000/50000]	[L1: 23.7225]	69.5+25.6s

Evaluation:
[Epoch 115]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.8044]	69.6+25.4s
[48000/50000]	[L1: 23.6480]	69.6+25.4s

Evaluation:
[Epoch 116]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6962]	69.7+25.4s
[48000/50000]	[L1: 23.6361]	69.7+25.5s

Evaluation:
[Epoch 117]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.6230]	69.6+25.5s
[48000/50000]	[L1: 23.5974]	69.5+25.5s

Evaluation:
[Epoch 118]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5979]	69.7+25.5s
[48000/50000]	[L1: 23.6591]	69.7+25.3s

Evaluation:
[Epoch 119]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5113]	69.5+25.6s
[48000/50000]	[L1: 23.5846]	69.7+25.4s

Evaluation:
[Epoch 120]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5569]	69.7+25.6s
[48000/50000]	[L1: 23.5990]	69.6+25.6s

Evaluation:
[TEST x5]	PSNR: 38.3794 SSIM: 0.9513 (Best: 38.3794 0.9513 @epoch 119)
Total time: 3685.38s

[Epoch 121]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4942]	68.9+35.4s
[48000/50000]	[L1: 23.5516]	69.3+36.0s

Evaluation:
[Epoch 122]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5744]	69.5+25.5s
[48000/50000]	[L1: 23.5824]	70.1+25.5s

Evaluation:
[Epoch 123]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5411]	70.1+25.5s
[48000/50000]	[L1: 23.5242]	70.1+25.4s

Evaluation:
[Epoch 124]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4927]	70.1+25.4s
[48000/50000]	[L1: 23.5260]	70.1+25.4s

Evaluation:
[Epoch 125]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4989]	70.1+25.6s
[48000/50000]	[L1: 23.4952]	70.2+25.5s

Evaluation:
[Epoch 126]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3984]	70.3+25.5s
[48000/50000]	[L1: 23.4254]	70.1+25.5s

Evaluation:
[Epoch 127]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4226]	70.1+25.5s
[48000/50000]	[L1: 23.4679]	70.1+25.6s

Evaluation:
[Epoch 128]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3376]	70.2+25.5s
[48000/50000]	[L1: 23.4796]	70.2+25.4s

Evaluation:
[Epoch 129]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5454]	70.3+25.4s
[48000/50000]	[L1: 23.4405]	70.2+25.5s

Evaluation:
[Epoch 130]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3510]	70.2+25.5s
[48000/50000]	[L1: 23.4239]	70.2+25.4s

Evaluation:
[TEST x5]	PSNR: 38.4008 SSIM: 0.9513 (Best: 38.4008 0.9513 @epoch 129)
Total time: 3664.12s

[Epoch 131]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5532]	68.8+35.7s
[48000/50000]	[L1: 23.5129]	69.3+35.5s

Evaluation:
[Epoch 132]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4719]	69.4+25.4s
[48000/50000]	[L1: 23.4601]	69.6+25.4s

Evaluation:
[Epoch 133]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4092]	69.6+25.5s
[48000/50000]	[L1: 23.4535]	69.6+25.5s

Evaluation:
[Epoch 134]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4342]	69.7+25.6s
[48000/50000]	[L1: 23.4511]	69.8+25.4s

Evaluation:
[Epoch 135]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5192]	69.9+25.5s
[48000/50000]	[L1: 23.3845]	69.8+25.5s

Evaluation:
[Epoch 136]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1361]	69.8+25.4s
[48000/50000]	[L1: 23.2829]	69.8+25.6s

Evaluation:
[Epoch 137]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5478]	69.7+25.4s
[48000/50000]	[L1: 23.5480]	69.9+25.6s

Evaluation:
[Epoch 138]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3031]	69.7+25.5s
[48000/50000]	[L1: 23.3925]	69.8+25.3s

Evaluation:
[Epoch 139]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3237]	69.9+25.3s
[48000/50000]	[L1: 23.3772]	69.8+25.6s

Evaluation:
[Epoch 140]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2825]	69.9+25.4s
[48000/50000]	[L1: 23.3984]	69.9+25.4s

Evaluation:
[TEST x5]	PSNR: 38.4315 SSIM: 0.9515 (Best: 38.4315 0.9515 @epoch 139)
Total time: 3691.73s

[Epoch 141]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3338]	68.9+36.5s
[48000/50000]	[L1: 23.4023]	69.2+36.2s

Evaluation:
[Epoch 142]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3338]	69.2+25.5s
[48000/50000]	[L1: 23.3912]	69.5+25.5s

Evaluation:
[Epoch 143]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3843]	69.6+25.5s
[48000/50000]	[L1: 23.3670]	69.8+25.5s

Evaluation:
[Epoch 144]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4785]	69.7+25.6s
[48000/50000]	[L1: 23.3839]	69.8+25.5s

Evaluation:
[Epoch 145]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3476]	69.8+25.5s
[48000/50000]	[L1: 23.3655]	70.0+25.4s

Evaluation:
[Epoch 146]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3062]	69.8+25.4s
[48000/50000]	[L1: 23.3172]	69.9+25.5s

Evaluation:
[Epoch 147]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.5201]	69.9+25.5s
[48000/50000]	[L1: 23.3958]	69.9+25.4s

Evaluation:
[Epoch 148]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4194]	69.7+25.5s
[48000/50000]	[L1: 23.3904]	69.7+25.4s

Evaluation:
[Epoch 149]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.4315]	69.8+25.4s
[48000/50000]	[L1: 23.3980]	69.9+25.5s

Evaluation:
[Epoch 150]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1590]	69.8+25.4s
[48000/50000]	[L1: 23.2556]	69.7+25.5s

Evaluation:
[TEST x5]	PSNR: 38.3784 SSIM: 0.9513 (Best: 38.4315 0.9515 @epoch 139)
Total time: 3723.66s

[Epoch 151]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3007]	68.8+35.9s
[48000/50000]	[L1: 23.3490]	69.1+35.1s

Evaluation:
[Epoch 152]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1112]	69.4+25.6s
[48000/50000]	[L1: 23.2855]	69.5+25.5s

Evaluation:
[Epoch 153]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2972]	69.5+25.5s
[48000/50000]	[L1: 23.3212]	69.6+25.5s

Evaluation:
[Epoch 154]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1338]	69.6+25.5s
[48000/50000]	[L1: 23.2717]	69.8+25.6s

Evaluation:
[Epoch 155]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1415]	69.9+25.5s
[48000/50000]	[L1: 23.1842]	69.8+25.5s

Evaluation:
[Epoch 156]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1472]	69.8+25.4s
[48000/50000]	[L1: 23.1735]	69.8+25.6s

Evaluation:
[Epoch 157]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1242]	69.8+25.5s
[48000/50000]	[L1: 23.2055]	69.7+25.4s

Evaluation:
[Epoch 158]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1653]	69.7+25.4s
[48000/50000]	[L1: 23.2756]	69.7+25.6s

Evaluation:
[Epoch 159]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3565]	69.7+25.6s
[48000/50000]	[L1: 23.3169]	69.9+25.4s

Evaluation:
[Epoch 160]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2906]	69.7+25.4s
[48000/50000]	[L1: 23.2862]	69.8+25.5s

Evaluation:
[TEST x5]	PSNR: 38.4493 SSIM: 0.9516 (Best: 38.4493 0.9516 @epoch 159)
Total time: 3750.71s

[Epoch 161]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2426]	68.6+34.4s
[48000/50000]	[L1: 23.2554]	69.1+34.9s

Evaluation:
[Epoch 162]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3161]	69.4+25.5s
[48000/50000]	[L1: 23.2706]	69.7+25.4s

Evaluation:
[Epoch 163]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2600]	69.7+25.4s
[48000/50000]	[L1: 23.2377]	69.7+25.4s

Evaluation:
[Epoch 164]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3284]	69.8+25.5s
[48000/50000]	[L1: 23.2228]	69.8+25.7s

Evaluation:
[Epoch 165]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1760]	69.7+25.6s
[48000/50000]	[L1: 23.1977]	69.8+25.5s

Evaluation:
[Epoch 166]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2320]	69.8+25.5s
[48000/50000]	[L1: 23.1882]	69.9+25.5s

Evaluation:
[Epoch 167]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2093]	69.9+25.3s
[48000/50000]	[L1: 23.2418]	69.9+25.5s

Evaluation:
[Epoch 168]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2486]	69.9+25.5s
[48000/50000]	[L1: 23.1857]	69.8+25.4s

Evaluation:
[Epoch 169]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0768]	69.8+25.5s
[48000/50000]	[L1: 23.1401]	69.8+25.4s

Evaluation:
[Epoch 170]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1667]	69.9+25.5s
[48000/50000]	[L1: 23.1248]	69.9+25.6s

Evaluation:
[TEST x5]	PSNR: 38.5006 SSIM: 0.9518 (Best: 38.5006 0.9518 @epoch 169)
Total time: 3711.58s

[Epoch 171]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1418]	69.0+34.2s
[48000/50000]	[L1: 23.1689]	69.3+34.2s

Evaluation:
[Epoch 172]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2666]	69.5+25.5s
[48000/50000]	[L1: 23.2960]	69.6+25.4s

Evaluation:
[Epoch 173]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1409]	69.7+25.5s
[48000/50000]	[L1: 23.1851]	69.7+25.6s

Evaluation:
[Epoch 174]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1512]	69.7+25.4s
[48000/50000]	[L1: 23.1995]	69.6+25.5s

Evaluation:
[Epoch 175]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0336]	69.7+25.5s
[48000/50000]	[L1: 23.1528]	69.7+25.5s

Evaluation:
[Epoch 176]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0073]	69.7+25.4s
[48000/50000]	[L1: 23.0648]	69.8+25.4s

Evaluation:
[Epoch 177]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1585]	69.7+25.4s
[48000/50000]	[L1: 23.1999]	69.6+25.4s

Evaluation:
[Epoch 178]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.3381]	69.7+25.5s
[48000/50000]	[L1: 23.1456]	69.8+25.8s

Evaluation:
[Epoch 179]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1722]	69.8+26.1s
[48000/50000]	[L1: 23.1322]	69.7+25.6s

Evaluation:
[Epoch 180]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0864]	69.7+25.6s
[48000/50000]	[L1: 23.0950]	69.8+25.5s

Evaluation:
[TEST x5]	PSNR: 38.5128 SSIM: 0.9517 (Best: 38.5128 0.9517 @epoch 179)
Total time: 3755.69s

[Epoch 181]	Learning rate: 5.00e-5
[24000/50000]	[L1: 22.9558]	68.7+36.5s
[48000/50000]	[L1: 22.9832]	69.3+36.5s

Evaluation:
[Epoch 182]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0747]	69.7+25.4s
[48000/50000]	[L1: 23.1340]	69.8+25.5s

Evaluation:
[Epoch 183]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1090]	69.5+25.5s
[48000/50000]	[L1: 23.1248]	69.7+25.5s

Evaluation:
[Epoch 184]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1506]	69.7+25.5s
[48000/50000]	[L1: 23.1521]	69.7+25.5s

Evaluation:
[Epoch 185]	Learning rate: 5.00e-5
[24000/50000]	[L1: 22.9941]	69.7+25.7s
[48000/50000]	[L1: 23.0991]	69.7+25.4s

Evaluation:
[Epoch 186]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0184]	69.7+25.4s
[48000/50000]	[L1: 23.1174]	69.8+25.5s

Evaluation:
[Epoch 187]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.2309]	69.8+25.5s
[48000/50000]	[L1: 23.1477]	69.7+25.4s

Evaluation:
[Epoch 188]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0777]	69.8+25.5s
[48000/50000]	[L1: 23.0335]	69.8+25.4s

Evaluation:
[Epoch 189]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0614]	69.8+25.5s
[48000/50000]	[L1: 23.0630]	69.8+25.5s

Evaluation:
[Epoch 190]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0591]	69.9+25.5s
[48000/50000]	[L1: 23.0220]	69.8+25.5s

Evaluation:
[TEST x5]	PSNR: 38.5606 SSIM: 0.9519 (Best: 38.5606 0.9519 @epoch 189)
Total time: 3745.93s

[Epoch 191]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1365]	68.9+38.0s
[48000/50000]	[L1: 23.0215]	69.2+37.0s

Evaluation:
[Epoch 192]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.1464]	69.4+25.5s
[48000/50000]	[L1: 23.0396]	69.5+25.5s

Evaluation:
[Epoch 193]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0475]	69.6+25.4s
[48000/50000]	[L1: 22.9603]	69.7+25.4s

Evaluation:
[Epoch 194]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0167]	69.7+25.4s
[48000/50000]	[L1: 23.0359]	69.6+25.5s

Evaluation:
[Epoch 195]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0539]	69.5+25.5s
[48000/50000]	[L1: 22.9981]	69.5+25.4s

Evaluation:
[Epoch 196]	Learning rate: 5.00e-5
[24000/50000]	[L1: 22.9979]	69.9+25.4s
[48000/50000]	[L1: 23.0495]	69.6+25.4s

Evaluation:
[Epoch 197]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0219]	69.4+25.4s
[48000/50000]	[L1: 23.0598]	69.4+25.4s

Evaluation:
[Epoch 198]	Learning rate: 5.00e-5
[24000/50000]	[L1: 22.9968]	69.5+25.5s
[48000/50000]	[L1: 22.9978]	69.5+25.4s

Evaluation:
[Epoch 199]	Learning rate: 5.00e-5
[24000/50000]	[L1: 23.0057]	69.5+25.4s
[48000/50000]	[L1: 22.9976]	69.5+25.4s

Evaluation:
[Epoch 200]	Learning rate: 5.00e-5
[24000/50000]	[L1: 22.8948]	69.5+25.4s
[48000/50000]	[L1: 22.9309]	69.4+25.5s

Evaluation:
[TEST x5]	PSNR: 38.5819 SSIM: 0.9521 (Best: 38.5819 0.9521 @epoch 199)
Total time: 3730.21s

[Epoch 201]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.9319]	68.9+35.3s
[48000/50000]	[L1: 22.8473]	69.0+35.2s

Evaluation:
[Epoch 202]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7841]	69.4+25.4s
[48000/50000]	[L1: 22.7993]	69.5+25.5s

Evaluation:
[Epoch 203]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7276]	69.3+25.4s
[48000/50000]	[L1: 22.8079]	69.7+25.5s

Evaluation:
[Epoch 204]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7822]	69.7+25.6s
[48000/50000]	[L1: 22.8586]	69.6+25.4s

Evaluation:
[Epoch 205]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7993]	69.8+25.4s
[48000/50000]	[L1: 22.8076]	69.5+25.4s

Evaluation:
[Epoch 206]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6436]	69.7+25.4s
[48000/50000]	[L1: 22.8012]	69.3+25.5s

Evaluation:
[Epoch 207]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7205]	69.4+25.5s
[48000/50000]	[L1: 22.7774]	69.6+25.5s

Evaluation:
[Epoch 208]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8852]	69.9+25.5s
[48000/50000]	[L1: 22.8459]	69.9+25.5s

Evaluation:
[Epoch 209]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8476]	69.9+25.5s
[48000/50000]	[L1: 22.8296]	69.8+25.5s

Evaluation:
[Epoch 210]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8665]	69.8+25.3s
[48000/50000]	[L1: 22.9211]	69.8+25.6s

Evaluation:
[TEST x5]	PSNR: 38.6171 SSIM: 0.9523 (Best: 38.6171 0.9523 @epoch 209)
Total time: 3758.81s

[Epoch 211]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8050]	68.9+33.9s
[48000/50000]	[L1: 22.8312]	69.2+34.1s

Evaluation:
[Epoch 212]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8382]	69.4+25.6s
[48000/50000]	[L1: 22.8715]	69.5+25.5s

Evaluation:
[Epoch 213]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.9345]	69.5+25.4s
[48000/50000]	[L1: 22.9265]	69.7+25.6s

Evaluation:
[Epoch 214]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8272]	69.7+25.6s
[48000/50000]	[L1: 22.7866]	69.6+25.5s

Evaluation:
[Epoch 215]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7032]	69.7+25.5s
[48000/50000]	[L1: 22.7229]	69.6+25.5s

Evaluation:
[Epoch 216]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8369]	69.7+25.5s
[48000/50000]	[L1: 22.8204]	69.8+25.4s

Evaluation:
[Epoch 217]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7828]	69.7+25.4s
[48000/50000]	[L1: 22.7725]	69.8+25.5s

Evaluation:
[Epoch 218]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7571]	69.7+25.5s
[48000/50000]	[L1: 22.7379]	69.7+25.6s

Evaluation:
[Epoch 219]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8596]	69.4+25.5s
[48000/50000]	[L1: 22.8578]	69.4+25.5s

Evaluation:
[Epoch 220]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7590]	69.3+25.5s
[48000/50000]	[L1: 22.7966]	69.4+25.5s

Evaluation:
[TEST x5]	PSNR: 38.5968 SSIM: 0.9522 (Best: 38.6171 0.9523 @epoch 209)
Total time: 3772.61s

[Epoch 221]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7723]	69.0+33.3s
[48000/50000]	[L1: 22.7629]	69.3+33.4s

Evaluation:
[Epoch 222]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7918]	69.7+25.6s
[48000/50000]	[L1: 22.7936]	69.7+25.5s

Evaluation:
[Epoch 223]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6908]	69.7+25.6s
[48000/50000]	[L1: 22.7236]	69.8+25.5s

Evaluation:
[Epoch 224]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6682]	69.8+25.4s
[48000/50000]	[L1: 22.7565]	69.9+25.4s

Evaluation:
[Epoch 225]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8261]	69.9+25.5s
[48000/50000]	[L1: 22.8837]	70.0+25.5s

Evaluation:
[Epoch 226]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7515]	69.9+25.5s
[48000/50000]	[L1: 22.8355]	70.0+25.4s

Evaluation:
[Epoch 227]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6679]	69.9+25.6s
[48000/50000]	[L1: 22.7237]	69.9+25.5s

Evaluation:
[Epoch 228]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6265]	69.7+25.6s
[48000/50000]	[L1: 22.7037]	69.5+25.4s

Evaluation:
[Epoch 229]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6491]	69.5+25.5s
[48000/50000]	[L1: 22.7272]	69.6+25.6s

Evaluation:
[Epoch 230]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6614]	69.5+25.5s
[48000/50000]	[L1: 22.6976]	69.6+25.6s

Evaluation:
[TEST x5]	PSNR: 38.5960 SSIM: 0.9522 (Best: 38.6171 0.9523 @epoch 209)
Total time: 3748.03s

[Epoch 231]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7209]	68.8+34.4s
[48000/50000]	[L1: 22.7035]	69.5+34.4s

Evaluation:
[Epoch 232]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8270]	69.6+25.4s
[48000/50000]	[L1: 22.7278]	69.7+25.5s

Evaluation:
[Epoch 233]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7030]	69.7+25.6s
[48000/50000]	[L1: 22.8134]	69.8+25.7s

Evaluation:
[Epoch 234]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7420]	69.8+27.0s
[48000/50000]	[L1: 22.8070]	69.7+25.8s

Evaluation:
[Epoch 235]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7557]	69.5+25.6s
[48000/50000]	[L1: 22.7269]	69.7+25.4s

Evaluation:
[Epoch 236]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7063]	69.5+25.5s
[48000/50000]	[L1: 22.6987]	69.7+25.5s

Evaluation:
[Epoch 237]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7240]	69.7+25.6s
[48000/50000]	[L1: 22.7110]	69.7+25.5s

Evaluation:
[Epoch 238]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7008]	69.5+25.4s
[48000/50000]	[L1: 22.7282]	69.5+25.5s

Evaluation:
[Epoch 239]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6513]	69.5+25.5s
[48000/50000]	[L1: 22.6937]	69.5+25.5s

Evaluation:
[Epoch 240]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7269]	69.5+25.5s
[48000/50000]	[L1: 22.6787]	69.4+25.5s

Evaluation:
[TEST x5]	PSNR: 38.5960 SSIM: 0.9523 (Best: 38.6171 0.9523 @epoch 209)
Total time: 3772.42s

[Epoch 241]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.8732]	69.0+36.6s
[48000/50000]	[L1: 22.7933]	69.5+36.4s

Evaluation:
[Epoch 242]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7635]	69.5+25.6s
[48000/50000]	[L1: 22.7561]	69.7+25.5s

Evaluation:
[Epoch 243]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6164]	69.7+25.7s
[48000/50000]	[L1: 22.7351]	69.7+25.4s

Evaluation:
[Epoch 244]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7525]	69.5+25.5s
[48000/50000]	[L1: 22.7118]	69.4+25.4s

Evaluation:
[Epoch 245]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7284]	69.5+25.4s
[48000/50000]	[L1: 22.7158]	69.5+25.4s

Evaluation:
[Epoch 246]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7565]	69.5+25.3s
[48000/50000]	[L1: 22.7331]	69.5+25.4s

Evaluation:
[Epoch 247]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7059]	69.4+25.4s
[48000/50000]	[L1: 22.7057]	69.4+25.5s

Evaluation:
[Epoch 248]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7650]	69.4+25.6s
[48000/50000]	[L1: 22.7952]	69.5+25.3s

Evaluation:
[Epoch 249]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7174]	69.4+25.5s
[48000/50000]	[L1: 22.7230]	69.5+25.5s

Evaluation:
[Epoch 250]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6758]	69.5+25.4s
[48000/50000]	[L1: 22.6791]	69.5+25.5s

Evaluation:
[TEST x5]	PSNR: 38.6377 SSIM: 0.9524 (Best: 38.6377 0.9524 @epoch 249)
Total time: 3726.71s

[Epoch 251]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7778]	68.9+35.8s
[48000/50000]	[L1: 22.7170]	69.3+36.1s

Evaluation:
[Epoch 252]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6225]	69.4+25.5s
[48000/50000]	[L1: 22.6742]	69.6+25.4s

Evaluation:
[Epoch 253]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6569]	69.4+25.6s
[48000/50000]	[L1: 22.6622]	69.5+25.6s

Evaluation:
[Epoch 254]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6991]	69.2+25.5s
[48000/50000]	[L1: 22.6724]	69.4+25.5s

Evaluation:
[Epoch 255]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6325]	69.5+25.4s
[48000/50000]	[L1: 22.7264]	69.5+25.5s

Evaluation:
[Epoch 256]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7054]	69.4+25.6s
[48000/50000]	[L1: 22.6249]	69.5+25.4s

Evaluation:
[Epoch 257]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6672]	69.5+25.4s
[48000/50000]	[L1: 22.6773]	69.5+25.5s

Evaluation:
[Epoch 258]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7068]	69.5+25.4s
[48000/50000]	[L1: 22.7167]	69.5+25.5s

Evaluation:
[Epoch 259]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5394]	69.5+25.4s
[48000/50000]	[L1: 22.6852]	69.3+25.5s

Evaluation:
[Epoch 260]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7911]	69.6+25.5s
[48000/50000]	[L1: 22.7095]	69.5+25.5s

Evaluation:
[TEST x5]	PSNR: 38.6822 SSIM: 0.9525 (Best: 38.6822 0.9525 @epoch 259)
Total time: 3780.47s

[Epoch 261]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5460]	68.9+36.5s
[48000/50000]	[L1: 22.7161]	69.4+35.4s

Evaluation:
[Epoch 262]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6805]	69.6+25.6s
[48000/50000]	[L1: 22.6611]	69.6+25.4s

Evaluation:
[Epoch 263]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5220]	69.5+25.5s
[48000/50000]	[L1: 22.5303]	69.5+25.5s

Evaluation:
[Epoch 264]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7037]	69.3+25.6s
[48000/50000]	[L1: 22.6409]	69.4+25.5s

Evaluation:
[Epoch 265]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5595]	69.6+25.6s
[48000/50000]	[L1: 22.6210]	69.3+25.4s

Evaluation:
[Epoch 266]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5890]	69.2+25.5s
[48000/50000]	[L1: 22.6522]	69.4+25.5s

Evaluation:
[Epoch 267]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6518]	69.4+25.5s
[48000/50000]	[L1: 22.6231]	69.4+25.6s

Evaluation:
[Epoch 268]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5890]	69.4+25.5s
[48000/50000]	[L1: 22.6492]	69.4+25.4s

Evaluation:
[Epoch 269]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6696]	69.4+25.5s
[48000/50000]	[L1: 22.5901]	69.5+25.5s

Evaluation:
[Epoch 270]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5535]	69.3+25.5s
[48000/50000]	[L1: 22.6699]	69.4+25.4s

Evaluation:
[TEST x5]	PSNR: 38.6572 SSIM: 0.9525 (Best: 38.6822 0.9525 @epoch 259)
Total time: 3753.46s

[Epoch 271]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7443]	68.8+35.1s
[48000/50000]	[L1: 22.6666]	69.2+34.9s

Evaluation:
[Epoch 272]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5461]	69.4+25.5s
[48000/50000]	[L1: 22.5679]	69.5+25.4s

Evaluation:
[Epoch 273]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6427]	69.6+25.4s
[48000/50000]	[L1: 22.6474]	69.7+25.5s

Evaluation:
[Epoch 274]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7257]	69.8+25.5s
[48000/50000]	[L1: 22.7130]	69.8+25.5s

Evaluation:
[Epoch 275]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6653]	69.8+25.5s
[48000/50000]	[L1: 22.6589]	69.9+25.7s

Evaluation:
[Epoch 276]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7129]	69.8+25.4s
[48000/50000]	[L1: 22.6802]	69.9+25.4s

Evaluation:
[Epoch 277]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6844]	69.9+25.4s
[48000/50000]	[L1: 22.6412]	70.0+25.4s

Evaluation:
[Epoch 278]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5357]	69.9+25.4s
[48000/50000]	[L1: 22.5724]	69.9+25.6s

Evaluation:
[Epoch 279]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5234]	69.9+25.6s
[48000/50000]	[L1: 22.5389]	69.9+25.6s

Evaluation:
[Epoch 280]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5581]	69.9+25.5s
[48000/50000]	[L1: 22.6280]	69.9+25.5s

Evaluation:
[TEST x5]	PSNR: 38.6776 SSIM: 0.9525 (Best: 38.6822 0.9525 @epoch 259)
Total time: 3747.56s

[Epoch 281]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6227]	68.7+36.2s
[48000/50000]	[L1: 22.5394]	69.4+35.6s

Evaluation:
[Epoch 282]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5737]	69.6+25.5s
[48000/50000]	[L1: 22.5866]	69.7+25.5s

Evaluation:
[Epoch 283]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6240]	69.5+25.5s
[48000/50000]	[L1: 22.5966]	69.6+25.4s

Evaluation:
[Epoch 284]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5572]	69.7+25.5s
[48000/50000]	[L1: 22.6091]	69.7+25.6s

Evaluation:
[Epoch 285]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6568]	69.8+25.5s
[48000/50000]	[L1: 22.5904]	69.6+25.5s

Evaluation:
[Epoch 286]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5836]	69.6+25.4s
[48000/50000]	[L1: 22.5585]	69.8+25.5s

Evaluation:
[Epoch 287]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.4846]	69.8+25.4s
[48000/50000]	[L1: 22.5852]	69.9+25.5s

Evaluation:
[Epoch 288]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6240]	69.7+25.5s
[48000/50000]	[L1: 22.5889]	69.9+25.5s

Evaluation:
[Epoch 289]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6843]	69.7+25.5s
[48000/50000]	[L1: 22.7019]	69.8+25.4s

Evaluation:
[Epoch 290]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5914]	69.7+25.6s
[48000/50000]	[L1: 22.5694]	69.8+25.6s

Evaluation:
[TEST x5]	PSNR: 38.7318 SSIM: 0.9528 (Best: 38.7318 0.9528 @epoch 289)
Total time: 3737.99s

[Epoch 291]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.7433]	68.7+33.6s
[48000/50000]	[L1: 22.6286]	69.2+33.4s

Evaluation:
[Epoch 292]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5870]	69.4+25.6s
[48000/50000]	[L1: 22.5941]	69.6+25.4s

Evaluation:
[Epoch 293]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.4792]	69.8+25.8s
[48000/50000]	[L1: 22.6207]	69.8+25.5s

Evaluation:
[Epoch 294]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.4943]	69.8+25.6s
[48000/50000]	[L1: 22.5540]	69.9+25.5s

Evaluation:
[Epoch 295]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6250]	69.8+25.5s
[48000/50000]	[L1: 22.6306]	69.9+25.4s

Evaluation:
[Epoch 296]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5422]	69.8+25.4s
[48000/50000]	[L1: 22.6426]	69.8+25.5s

Evaluation:
[Epoch 297]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6214]	69.6+25.5s
[48000/50000]	[L1: 22.5595]	69.8+25.4s

Evaluation:
[Epoch 298]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.4032]	69.7+25.6s
[48000/50000]	[L1: 22.5236]	69.9+25.5s

Evaluation:
[Epoch 299]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.6210]	69.8+25.4s
[48000/50000]	[L1: 22.5947]	69.8+25.5s

Evaluation:
[Epoch 300]	Learning rate: 2.50e-5
[24000/50000]	[L1: 22.5397]	69.8+25.4s
[48000/50000]	[L1: 22.6147]	69.7+25.6s

Evaluation:
[TEST x5]	PSNR: 38.6915 SSIM: 0.9526 (Best: 38.7318 0.9528 @epoch 289)
Total time: 3717.99s

[Epoch 301]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5046]	68.7+35.5s
[48000/50000]	[L1: 22.5127]	69.3+35.6s

Evaluation:
[Epoch 302]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5375]	69.6+25.7s
[48000/50000]	[L1: 22.4734]	69.6+25.5s

Evaluation:
[Epoch 303]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4781]	69.7+25.5s
[48000/50000]	[L1: 22.4374]	69.6+25.6s

Evaluation:
[Epoch 304]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.6605]	69.7+25.5s
[48000/50000]	[L1: 22.5652]	69.8+25.5s

Evaluation:
[Epoch 305]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4981]	69.7+25.4s
[48000/50000]	[L1: 22.4357]	69.7+25.5s

Evaluation:
[Epoch 306]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5395]	69.7+25.6s
[48000/50000]	[L1: 22.4726]	69.8+25.5s

Evaluation:
[Epoch 307]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4533]	69.8+25.5s
[48000/50000]	[L1: 22.4488]	69.7+25.6s

Evaluation:
[Epoch 308]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4112]	69.7+25.4s
[48000/50000]	[L1: 22.4758]	69.8+25.5s

Evaluation:
[Epoch 309]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3742]	69.8+25.4s
[48000/50000]	[L1: 22.4814]	69.8+25.6s

Evaluation:
[Epoch 310]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4967]	69.7+25.5s
[48000/50000]	[L1: 22.4589]	69.8+25.5s

Evaluation:
[TEST x5]	PSNR: 38.7511 SSIM: 0.9528 (Best: 38.7511 0.9528 @epoch 309)
Total time: 3723.33s

[Epoch 311]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4405]	68.8+36.3s
[48000/50000]	[L1: 22.4276]	69.1+35.7s

Evaluation:
[Epoch 312]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3712]	69.6+25.6s
[48000/50000]	[L1: 22.5039]	69.6+25.4s

Evaluation:
[Epoch 313]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3264]	69.6+25.4s
[48000/50000]	[L1: 22.4350]	69.5+25.5s

Evaluation:
[Epoch 314]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5240]	69.6+25.5s
[48000/50000]	[L1: 22.5430]	69.7+25.4s

Evaluation:
[Epoch 315]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5337]	69.8+25.5s
[48000/50000]	[L1: 22.5104]	69.8+25.5s

Evaluation:
[Epoch 316]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5380]	69.8+25.5s
[48000/50000]	[L1: 22.4818]	69.9+25.5s

Evaluation:
[Epoch 317]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5389]	69.7+25.7s
[48000/50000]	[L1: 22.4898]	69.9+25.5s

Evaluation:
[Epoch 318]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4720]	69.9+25.5s
[48000/50000]	[L1: 22.4580]	69.9+25.3s

Evaluation:
[Epoch 319]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4706]	69.9+25.5s
[48000/50000]	[L1: 22.4574]	69.9+25.4s

Evaluation:
[Epoch 320]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5530]	69.9+25.4s
[48000/50000]	[L1: 22.4944]	69.9+25.5s

Evaluation:
[TEST x5]	PSNR: 38.6999 SSIM: 0.9526 (Best: 38.7511 0.9528 @epoch 309)
Total time: 3752.28s

[Epoch 321]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4709]	68.6+36.6s
[48000/50000]	[L1: 22.4524]	69.2+36.9s

Evaluation:
[Epoch 322]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4360]	69.2+25.5s
[48000/50000]	[L1: 22.4462]	69.4+25.5s

Evaluation:
[Epoch 323]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5868]	69.9+25.5s
[48000/50000]	[L1: 22.5077]	69.9+25.5s

Evaluation:
[Epoch 324]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5843]	70.0+25.5s
[48000/50000]	[L1: 22.4651]	70.1+25.4s

Evaluation:
[Epoch 325]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5118]	70.0+25.6s
[48000/50000]	[L1: 22.4692]	70.0+25.6s

Evaluation:
[Epoch 326]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5369]	70.0+25.5s
[48000/50000]	[L1: 22.4572]	70.0+25.4s

Evaluation:
[Epoch 327]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4647]	70.2+25.4s
[48000/50000]	[L1: 22.4152]	70.0+25.5s

Evaluation:
[Epoch 328]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5117]	69.9+25.5s
[48000/50000]	[L1: 22.4810]	70.1+25.5s

Evaluation:
[Epoch 329]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4063]	70.0+25.7s
[48000/50000]	[L1: 22.4817]	70.0+26.0s

Evaluation:
[Epoch 330]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3919]	70.0+25.7s
[48000/50000]	[L1: 22.4805]	70.1+25.6s

Evaluation:
[TEST x5]	PSNR: 38.6842 SSIM: 0.9526 (Best: 38.7511 0.9528 @epoch 309)
Total time: 3745.91s

[Epoch 331]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4722]	68.8+36.6s
[48000/50000]	[L1: 22.4646]	69.3+35.7s

Evaluation:
[Epoch 332]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4440]	69.6+25.7s
[48000/50000]	[L1: 22.4035]	69.5+25.5s

Evaluation:
[Epoch 333]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4610]	69.9+25.4s
[48000/50000]	[L1: 22.4797]	69.9+25.5s

Evaluation:
[Epoch 334]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4269]	70.0+25.6s
[48000/50000]	[L1: 22.5051]	70.0+25.5s

Evaluation:
[Epoch 335]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4066]	70.1+25.5s
[48000/50000]	[L1: 22.4241]	70.0+25.6s

Evaluation:
[Epoch 336]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3963]	70.0+25.4s
[48000/50000]	[L1: 22.4266]	70.1+25.5s

Evaluation:
[Epoch 337]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4062]	70.1+25.4s
[48000/50000]	[L1: 22.3737]	69.9+25.5s

Evaluation:
[Epoch 338]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3863]	70.1+25.6s
[48000/50000]	[L1: 22.3888]	70.1+25.5s

Evaluation:
[Epoch 339]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4907]	70.1+25.4s
[48000/50000]	[L1: 22.4648]	70.1+25.5s

Evaluation:
[Epoch 340]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5263]	70.1+25.5s
[48000/50000]	[L1: 22.4522]	70.1+25.2s

Evaluation:
[TEST x5]	PSNR: 38.7176 SSIM: 0.9527 (Best: 38.7511 0.9528 @epoch 309)
Total time: 3719.67s

[Epoch 341]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3805]	68.9+37.1s
[48000/50000]	[L1: 22.3939]	69.3+37.2s

Evaluation:
[Epoch 342]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3939]	69.6+25.5s
[48000/50000]	[L1: 22.4359]	69.7+25.6s

Evaluation:
[Epoch 343]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3943]	69.5+25.4s
[48000/50000]	[L1: 22.4219]	69.7+25.4s

Evaluation:
[Epoch 344]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3411]	69.8+25.3s
[48000/50000]	[L1: 22.4206]	69.8+25.5s

Evaluation:
[Epoch 345]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3978]	69.8+25.3s
[48000/50000]	[L1: 22.4458]	69.7+25.5s

Evaluation:
[Epoch 346]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5005]	69.9+25.6s
[48000/50000]	[L1: 22.4348]	69.9+25.4s

Evaluation:
[Epoch 347]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3270]	69.7+25.5s
[48000/50000]	[L1: 22.4679]	69.9+25.5s

Evaluation:
[Epoch 348]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3597]	69.8+25.4s
[48000/50000]	[L1: 22.4113]	69.8+25.6s

Evaluation:
[Epoch 349]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4130]	69.8+25.5s
[48000/50000]	[L1: 22.4136]	69.8+25.6s

Evaluation:
[Epoch 350]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5049]	70.0+25.6s
[48000/50000]	[L1: 22.4383]	69.9+25.3s

Evaluation:
[TEST x5]	PSNR: 38.7550 SSIM: 0.9529 (Best: 38.7550 0.9529 @epoch 349)
Total time: 3747.42s

[Epoch 351]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4303]	69.0+36.6s
[48000/50000]	[L1: 22.3774]	69.2+37.4s

Evaluation:
[Epoch 352]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4080]	69.4+25.5s
[48000/50000]	[L1: 22.4397]	69.5+25.4s

Evaluation:
[Epoch 353]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5644]	69.6+25.5s
[48000/50000]	[L1: 22.4640]	69.7+25.4s

Evaluation:
[Epoch 354]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3048]	69.7+25.4s
[48000/50000]	[L1: 22.4275]	69.7+25.5s

Evaluation:
[Epoch 355]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4318]	69.6+25.4s
[48000/50000]	[L1: 22.3926]	69.6+25.5s

Evaluation:
[Epoch 356]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4741]	69.8+25.5s
[48000/50000]	[L1: 22.3661]	69.4+25.4s

Evaluation:
[Epoch 357]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4381]	69.5+25.4s
[48000/50000]	[L1: 22.4566]	69.4+25.5s

Evaluation:
[Epoch 358]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.2294]	69.4+25.7s
[48000/50000]	[L1: 22.3681]	69.4+25.3s

Evaluation:
[Epoch 359]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.2772]	69.2+25.5s
[48000/50000]	[L1: 22.3729]	69.5+25.6s

Evaluation:
[Epoch 360]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3852]	69.3+25.5s
[48000/50000]	[L1: 22.4078]	69.3+25.5s

Evaluation:
[TEST x5]	PSNR: 38.7599 SSIM: 0.9529 (Best: 38.7599 0.9529 @epoch 359)
Total time: 3732.32s

[Epoch 361]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4226]	68.9+36.2s
[48000/50000]	[L1: 22.4344]	69.4+36.5s

Evaluation:
[Epoch 362]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3937]	69.6+25.5s
[48000/50000]	[L1: 22.3666]	70.0+25.5s

Evaluation:
[Epoch 363]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3837]	70.0+25.5s
[48000/50000]	[L1: 22.3867]	70.1+25.6s

Evaluation:
[Epoch 364]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4865]	70.0+25.5s
[48000/50000]	[L1: 22.4629]	70.1+25.5s

Evaluation:
[Epoch 365]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.2527]	70.1+25.5s
[48000/50000]	[L1: 22.3690]	70.2+25.4s

Evaluation:
[Epoch 366]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4800]	70.1+25.5s
[48000/50000]	[L1: 22.4660]	70.2+25.3s

Evaluation:
[Epoch 367]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3124]	70.2+25.5s
[48000/50000]	[L1: 22.4057]	70.0+25.6s

Evaluation:
[Epoch 368]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3409]	69.6+25.4s
[48000/50000]	[L1: 22.4118]	69.6+25.5s

Evaluation:
[Epoch 369]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3741]	69.8+25.4s
[48000/50000]	[L1: 22.3678]	69.6+25.5s

Evaluation:
[Epoch 370]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4048]	69.6+25.4s
[48000/50000]	[L1: 22.4249]	69.4+25.5s

Evaluation:
[TEST x5]	PSNR: 38.7899 SSIM: 0.9530 (Best: 38.7899 0.9530 @epoch 369)
Total time: 3722.24s

[Epoch 371]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4783]	68.9+34.8s
[48000/50000]	[L1: 22.4779]	69.3+35.0s

Evaluation:
[Epoch 372]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3519]	69.6+25.6s
[48000/50000]	[L1: 22.3659]	69.7+25.4s

Evaluation:
[Epoch 373]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.5036]	69.8+25.4s
[48000/50000]	[L1: 22.4564]	69.4+25.5s

Evaluation:
[Epoch 374]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4584]	69.4+25.4s
[48000/50000]	[L1: 22.4339]	69.4+25.5s

Evaluation:
[Epoch 375]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.2948]	69.5+25.4s
[48000/50000]	[L1: 22.3688]	69.5+25.5s

Evaluation:
[Epoch 376]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3425]	69.5+25.6s
[48000/50000]	[L1: 22.3553]	69.5+25.5s

Evaluation:
[Epoch 377]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3612]	69.5+25.5s
[48000/50000]	[L1: 22.3302]	69.4+25.6s

Evaluation:
[Epoch 378]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3998]	69.5+25.7s
[48000/50000]	[L1: 22.3479]	69.5+25.4s

Evaluation:
[Epoch 379]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4881]	69.5+25.5s
[48000/50000]	[L1: 22.5086]	69.4+25.3s

Evaluation:
[Epoch 380]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4445]	69.5+25.5s
[48000/50000]	[L1: 22.4559]	69.5+25.5s

Evaluation:
[TEST x5]	PSNR: 38.7867 SSIM: 0.9530 (Best: 38.7899 0.9530 @epoch 369)
Total time: 3722.37s

[Epoch 381]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4952]	68.9+34.8s
[48000/50000]	[L1: 22.4159]	69.5+34.4s

Evaluation:
[Epoch 382]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3103]	69.6+25.5s
[48000/50000]	[L1: 22.3480]	69.7+25.5s

Evaluation:
[Epoch 383]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3667]	69.7+25.5s
[48000/50000]	[L1: 22.3637]	69.8+25.4s

Evaluation:
[Epoch 384]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3899]	69.8+25.5s
[48000/50000]	[L1: 22.3720]	69.9+25.5s

Evaluation:
[Epoch 385]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3921]	70.0+26.3s
[48000/50000]	[L1: 22.3904]	69.6+26.8s

Evaluation:
[Epoch 386]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4581]	69.4+25.7s
[48000/50000]	[L1: 22.3638]	69.5+25.5s

Evaluation:
[Epoch 387]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4979]	69.4+25.5s
[48000/50000]	[L1: 22.4174]	69.5+25.4s

Evaluation:
[Epoch 388]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3686]	69.4+25.4s
[48000/50000]	[L1: 22.4094]	69.4+25.3s

Evaluation:
[Epoch 389]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4006]	69.4+25.6s
[48000/50000]	[L1: 22.4170]	69.6+25.5s

Evaluation:
[Epoch 390]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4912]	69.6+25.5s
[48000/50000]	[L1: 22.4131]	69.4+25.4s

Evaluation:
[TEST x5]	PSNR: 38.8071 SSIM: 0.9532 (Best: 38.8071 0.9532 @epoch 389)
Total time: 3729.93s

[Epoch 391]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3523]	68.9+35.9s
[48000/50000]	[L1: 22.3339]	69.4+34.9s

Evaluation:
[Epoch 392]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4468]	69.5+25.5s
[48000/50000]	[L1: 22.4017]	69.7+25.5s

Evaluation:
[Epoch 393]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3526]	69.7+25.4s
[48000/50000]	[L1: 22.4490]	69.8+25.4s

Evaluation:
[Epoch 394]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3917]	69.9+25.5s
[48000/50000]	[L1: 22.3633]	69.7+25.5s

Evaluation:
[Epoch 395]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3736]	69.7+25.5s
[48000/50000]	[L1: 22.4336]	69.7+25.3s

Evaluation:
[Epoch 396]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3641]	69.5+25.4s
[48000/50000]	[L1: 22.4175]	69.8+25.5s

Evaluation:
[Epoch 397]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3715]	69.4+25.4s
[48000/50000]	[L1: 22.3656]	69.5+25.5s

Evaluation:
[Epoch 398]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3846]	69.3+25.5s
[48000/50000]	[L1: 22.3443]	69.3+25.3s

Evaluation:
[Epoch 399]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.4511]	69.5+25.5s
[48000/50000]	[L1: 22.4384]	69.4+25.4s

Evaluation:
[Epoch 400]	Learning rate: 1.25e-5
[24000/50000]	[L1: 22.3248]	69.5+25.5s
[48000/50000]	[L1: 22.3237]	69.4+25.6s

Evaluation:
[TEST x5]	PSNR: 38.7764 SSIM: 0.9531 (Best: 38.8071 0.9532 @epoch 389)
Total time: 3720.75s

[Epoch 401]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.4659]	68.9+37.0s
[48000/50000]	[L1: 22.3673]	69.2+36.3s

Evaluation:
[Epoch 402]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2563]	69.5+25.5s
[48000/50000]	[L1: 22.3202]	69.6+25.7s

Evaluation:
[Epoch 403]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2759]	69.6+25.4s
[48000/50000]	[L1: 22.3346]	69.7+25.4s

Evaluation:
[Epoch 404]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3604]	69.7+25.5s
[48000/50000]	[L1: 22.3524]	69.6+25.5s

Evaluation:
[Epoch 405]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2843]	69.7+25.5s
[48000/50000]	[L1: 22.3405]	69.3+25.5s

Evaluation:
[Epoch 406]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3787]	69.3+25.4s
[48000/50000]	[L1: 22.3487]	69.5+25.5s

Evaluation:
[Epoch 407]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3030]	69.3+25.5s
[48000/50000]	[L1: 22.3554]	69.5+25.5s

Evaluation:
[Epoch 408]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3523]	69.4+25.5s
[48000/50000]	[L1: 22.3432]	69.4+25.5s

Evaluation:
[Epoch 409]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2866]	69.3+25.4s
[48000/50000]	[L1: 22.3631]	69.4+25.5s

Evaluation:
[Epoch 410]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3110]	69.4+25.5s
[48000/50000]	[L1: 22.3269]	69.3+25.4s

Evaluation:
[TEST x5]	PSNR: 38.7921 SSIM: 0.9530 (Best: 38.8071 0.9532 @epoch 389)
Total time: 3726.49s

[Epoch 411]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3141]	68.7+37.2s
[48000/50000]	[L1: 22.3688]	69.2+37.6s

Evaluation:
[Epoch 412]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3226]	69.5+25.6s
[48000/50000]	[L1: 22.3534]	69.7+25.6s

Evaluation:
[Epoch 413]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3936]	69.5+25.6s
[48000/50000]	[L1: 22.3837]	69.7+25.5s

Evaluation:
[Epoch 414]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3489]	69.6+25.6s
[48000/50000]	[L1: 22.3470]	69.8+25.5s

Evaluation:
[Epoch 415]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3317]	69.3+25.5s
[48000/50000]	[L1: 22.3541]	69.4+25.4s

Evaluation:
[Epoch 416]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.3550]	69.5+25.4s
[48000/50000]	[L1: 22.3826]	69.7+25.5s

Evaluation:
[Epoch 417]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.1985]	69.5+25.4s
[48000/50000]	[L1: 22.2905]	69.4+25.5s

Evaluation:
[Epoch 418]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2893]	69.5+25.5s
[48000/50000]	[L1: 22.3020]	69.4+25.5s

Evaluation:
[Epoch 419]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.5011]	69.3+25.5s
[48000/50000]	[L1: 22.3885]	69.4+25.4s

Evaluation:
[Epoch 420]	Learning rate: 6.25e-6
[24000/50000]	[L1: 22.2660]	69.3+25.4s
[48000/50000]	[L1: 22.3110]	69.4+25.5s

Evaluation:
[TEST x5]	PSNR: 38.7986 SSIM: 0.9531 (Best: 38.8071 0.9532 @epoch 389)
Total time: 3701.05s

DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
[18000/50000]	[L1: 100.8250]	73.1+32.4s
[36000/50000]	[L1: 78.1207]	68.2+32.8s

Evaluation:
[TEST x5]	PSNR: 31.3941 SSIM: 0.8361 (Best: 31.3941 0.8361 @epoch 1)
Total time: 2741.79s

[Epoch 3]	Learning rate: 1.00e-4
[18000/50000]	[L1: 50.1325]	68.2+21.3s
[36000/50000]	[L1: 49.2474]	68.4+21.6s

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4
[18000/50000]	[L1: 47.0548]	68.6+18.2s
[36000/50000]	[L1: 46.5690]	68.7+18.2s

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4
[18000/50000]	[L1: 43.8559]	68.8+18.1s
[36000/50000]	[L1: 43.6659]	68.9+18.1s

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4
[18000/50000]	[L1: 43.3172]	68.8+18.0s
[36000/50000]	[L1: 43.1122]	68.7+18.0s

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4
[18000/50000]	[L1: 42.2140]	68.8+18.0s
[36000/50000]	[L1: 41.8864]	68.8+18.0s

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4
[18000/50000]	[L1: 41.4858]	68.7+17.9s
[36000/50000]	[L1: 41.2609]	68.8+17.9s

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4
[18000/50000]	[L1: 41.5702]	68.9+18.0s
[36000/50000]	[L1: 40.7270]	68.9+18.0s

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.5934]	68.8+18.1s
[36000/50000]	[L1: 39.5059]	68.7+18.2s

Evaluation:
[TEST x5]	PSNR: 32.7994 SSIM: 0.8625 (Best: 32.7994 0.8625 @epoch 9)
Total time: 2795.48s

[Epoch 11]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.5002]	68.3+19.8s
[36000/50000]	[L1: 39.5244]	68.3+20.1s

Evaluation:
[Epoch 12]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.1765]	68.5+18.0s
[36000/50000]	[L1: 39.1252]	68.6+18.0s

Evaluation:
[Epoch 13]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.3842]	68.6+18.2s
[36000/50000]	[L1: 39.1153]	68.5+18.2s

Evaluation:
[Epoch 14]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.1263]	68.4+18.1s
[36000/50000]	[L1: 38.8975]	68.5+18.1s

Evaluation:
[Epoch 15]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.5751]	68.5+18.1s
[36000/50000]	[L1: 38.5464]	68.5+18.1s

Evaluation:
[Epoch 16]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.2894]	68.7+18.0s
[36000/50000]	[L1: 38.3384]	68.8+18.0s

Evaluation:
[Epoch 17]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.1259]	68.7+18.0s
[36000/50000]	[L1: 37.9383]	68.7+18.0s

Evaluation:
[Epoch 18]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.8503]	68.6+18.1s
[36000/50000]	[L1: 37.9454]	68.6+18.2s

Evaluation:
[Epoch 19]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.2995]	68.6+18.0s
[36000/50000]	[L1: 38.1088]	68.7+18.0s

Evaluation:
[Epoch 20]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.5146]	68.6+18.1s
[36000/50000]	[L1: 37.6084]	68.5+18.2s

Evaluation:
[TEST x5]	PSNR: 33.1011 SSIM: 0.8676 (Best: 33.1011 0.8676 @epoch 19)
Total time: 2760.52s

[Epoch 21]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.3906]	68.2+18.1s
[36000/50000]	[L1: 37.5710]	68.2+18.2s

Evaluation:
[Epoch 22]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.3088]	68.4+18.1s
[36000/50000]	[L1: 37.3637]	68.5+18.1s

Evaluation:
[Epoch 23]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.2969]	68.6+18.0s
[36000/50000]	[L1: 37.1760]	68.7+18.0s

Evaluation:
[Epoch 24]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.4455]	68.7+18.1s
[36000/50000]	[L1: 37.1818]	68.5+18.2s

Evaluation:
[Epoch 25]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.6209]	68.7+18.0s
[36000/50000]	[L1: 36.9239]	68.7+18.0s

Evaluation:
[Epoch 26]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.6207]	68.7+18.1s
[36000/50000]	[L1: 36.9851]	68.7+18.0s

Evaluation:
[Epoch 27]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.7814]	68.6+18.1s
[36000/50000]	[L1: 36.7555]	68.6+18.2s

Evaluation:
[Epoch 28]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.2452]	68.7+18.0s
[36000/50000]	[L1: 37.1526]	68.7+18.0s

Evaluation:
[Epoch 29]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.9233]	68.6+18.1s
[36000/50000]	[L1: 36.8092]	68.6+18.1s

Evaluation:
[Epoch 30]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.7861]	68.6+18.2s
[36000/50000]	[L1: 36.6156]	68.6+18.1s

Evaluation:
[TEST x5]	PSNR: 33.5279 SSIM: 0.8730 (Best: 33.5279 0.8730 @epoch 29)
Total time: 2761.69s

[Epoch 31]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7091]	68.1+18.4s
[36000/50000]	[L1: 36.0078]	68.3+18.3s

Evaluation:
[Epoch 32]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.1861]	68.4+17.9s
[36000/50000]	[L1: 36.3300]	68.6+18.0s

Evaluation:
[Epoch 33]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.0717]	68.5+18.0s
[36000/50000]	[L1: 36.0354]	68.5+18.2s

Evaluation:
[Epoch 34]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7022]	68.6+18.0s
[36000/50000]	[L1: 35.9804]	68.7+18.0s

Evaluation:
[Epoch 35]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.8992]	68.6+18.1s
[36000/50000]	[L1: 35.8512]	68.5+18.2s

Evaluation:
[Epoch 36]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7183]	68.7+18.0s
[36000/50000]	[L1: 35.7698]	68.6+18.0s

Evaluation:
[Epoch 37]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.1867]	68.6+18.1s
[36000/50000]	[L1: 36.2595]	68.5+18.2s

Evaluation:
[Epoch 38]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.4249]	68.7+18.0s
[36000/50000]	[L1: 36.2283]	68.6+18.0s

Evaluation:
[Epoch 39]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7234]	68.5+18.0s
[36000/50000]	[L1: 35.7516]	68.5+18.1s

Evaluation:
[Epoch 40]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.6313]	68.5+18.2s
[36000/50000]	[L1: 35.6698]	68.6+18.1s

Evaluation:
[TEST x5]	PSNR: 33.4480 SSIM: 0.8729 (Best: 33.5279 0.8730 @epoch 29)
Total time: 2759.27s

[Epoch 41]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.6526]	68.3+18.6s
[36000/50000]	[L1: 35.6763]	68.4+18.7s

Evaluation:
[Epoch 42]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7430]	68.5+18.1s
[36000/50000]	[L1: 35.5495]	68.5+18.1s

Evaluation:
[Epoch 43]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.2192]	68.6+18.1s
[36000/50000]	[L1: 35.5298]	68.8+18.1s

Evaluation:
[Epoch 44]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.6591]	68.8+18.1s
[36000/50000]	[L1: 35.5867]	68.8+18.0s

Evaluation:
[Epoch 45]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.5654]	68.8+18.1s
[36000/50000]	[L1: 35.4156]	68.8+18.1s

Evaluation:
[Epoch 46]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.2614]	68.8+18.1s
[36000/50000]	[L1: 35.1755]	68.9+18.0s

Evaluation:
[Epoch 47]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.0667]	68.8+18.0s
[36000/50000]	[L1: 35.1379]	68.7+18.2s

Evaluation:
[Epoch 48]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.2084]	68.8+18.0s
[36000/50000]	[L1: 35.1821]	68.9+18.1s

Evaluation:
[Epoch 49]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.2408]	68.9+17.9s
[36000/50000]	[L1: 35.1438]	68.9+17.9s

Evaluation:
[Epoch 50]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8502]	68.9+18.0s
[36000/50000]	[L1: 34.9043]	68.9+18.1s

Evaluation:
[TEST x5]	PSNR: 33.7334 SSIM: 0.8755 (Best: 33.7334 0.8755 @epoch 49)
Total time: 2769.93s

[Epoch 51]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8439]	68.1+18.6s
[36000/50000]	[L1: 34.7548]	68.3+18.9s

Evaluation:
[Epoch 52]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.1271]	68.5+18.0s
[36000/50000]	[L1: 35.0742]	68.4+18.0s

Evaluation:
[Epoch 53]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8499]	68.6+17.9s
[36000/50000]	[L1: 35.1246]	68.5+18.1s

Evaluation:
[Epoch 54]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.9093]	68.5+18.1s
[36000/50000]	[L1: 35.0641]	68.4+18.2s

Evaluation:
[Epoch 55]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.9011]	68.6+18.0s
[36000/50000]	[L1: 34.7500]	68.6+18.0s

Evaluation:
[Epoch 56]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.0837]	68.6+17.9s
[36000/50000]	[L1: 34.9153]	68.6+18.1s

Evaluation:
[Epoch 57]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8539]	68.4+18.1s
[36000/50000]	[L1: 34.7221]	68.5+18.2s

Evaluation:
[Epoch 58]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.4959]	68.7+18.1s
[36000/50000]	[L1: 34.6019]	68.7+18.0s

Evaluation:
[Epoch 59]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.6552]	68.5+18.1s
[36000/50000]	[L1: 34.7381]	68.6+18.2s

Evaluation:
[Epoch 60]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.5591]	68.5+18.2s
[36000/50000]	[L1: 34.4989]	68.6+18.0s

Evaluation:
[TEST x5]	PSNR: 33.7829 SSIM: 0.8766 (Best: 33.7829 0.8766 @epoch 59)
Total time: 2762.07s

DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)DataParallel(
  (module): MSR_RDN(
    (SFENet1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (4): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(192, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (5): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(224, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (6): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (7): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(288, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (GFF): Sequential(
      (0): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (GW): GenWeights(
      (meta_block): Sequential(
        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU(inplace=True)
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (RFN): FUSE_RDN(
      (SFENet1): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (SFENet2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RDBs): ModuleList(
        (0): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (3): RDB(
          (convs): Sequential(
            (0): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (1): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(76, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (2): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(88, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (3): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(100, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (4): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(112, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
            (5): RDB_Conv(
              (conv): Sequential(
                (0): Conv2d(124, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): ReLU()
              )
            )
          )
          (LFF): Conv2d(136, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (GFF): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (UPNet): Sequential(
        (0): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
[18000/50000]	[L1: 102.4575]	73.2+25.6s
[36000/50000]	[L1: 78.6490]	68.5+25.4s

Evaluation:
[TEST x5]	PSNR: 31.2049 SSIM: 0.8242 (Best: 31.2049 0.8242 @epoch 1)
Total time: 1249.44s

[Epoch 3]	Learning rate: 1.00e-4
[18000/50000]	[L1: 49.9840]	68.4+20.0s
[36000/50000]	[L1: 49.4163]	68.6+20.0s

Evaluation:
[Epoch 4]	Learning rate: 1.00e-4
[18000/50000]	[L1: 46.6899]	68.8+18.2s
[36000/50000]	[L1: 46.3079]	68.8+18.2s

Evaluation:
[Epoch 5]	Learning rate: 1.00e-4
[18000/50000]	[L1: 44.7332]	69.0+18.0s
[36000/50000]	[L1: 44.6573]	69.1+18.0s

Evaluation:
[Epoch 6]	Learning rate: 1.00e-4
[18000/50000]	[L1: 43.0447]	69.0+18.1s
[36000/50000]	[L1: 43.0197]	69.0+18.1s

Evaluation:
[Epoch 7]	Learning rate: 1.00e-4
[18000/50000]	[L1: 41.8918]	69.0+18.1s
[36000/50000]	[L1: 41.9692]	69.0+18.1s

Evaluation:
[Epoch 8]	Learning rate: 1.00e-4
[18000/50000]	[L1: 41.5761]	68.9+18.2s
[36000/50000]	[L1: 41.7316]	68.9+18.1s

Evaluation:
[Epoch 9]	Learning rate: 1.00e-4
[18000/50000]	[L1: 40.3664]	69.0+18.1s
[36000/50000]	[L1: 40.3908]	69.0+18.1s

Evaluation:
[Epoch 10]	Learning rate: 1.00e-4
[18000/50000]	[L1: 40.7096]	69.1+18.1s
[36000/50000]	[L1: 40.6282]	69.0+18.0s

Evaluation:
[TEST x5]	PSNR: 32.6624 SSIM: 0.8519 (Best: 32.6624 0.8519 @epoch 9)
Total time: 1257.41s

[Epoch 11]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.8988]	68.8+19.0s
[36000/50000]	[L1: 39.8107]	68.8+19.3s

Evaluation:
[Epoch 12]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.1824]	69.0+18.1s
[36000/50000]	[L1: 39.2238]	69.0+18.0s

Evaluation:
[Epoch 13]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.1487]	68.9+18.2s
[36000/50000]	[L1: 39.1567]	68.8+18.2s

Evaluation:
[Epoch 14]	Learning rate: 1.00e-4
[18000/50000]	[L1: 39.0287]	68.7+18.0s
[36000/50000]	[L1: 39.0624]	68.7+17.9s

Evaluation:
[Epoch 15]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.9967]	68.7+18.2s
[36000/50000]	[L1: 39.0346]	68.7+18.3s

Evaluation:
[Epoch 16]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.2853]	68.6+18.2s
[36000/50000]	[L1: 38.3544]	68.7+18.3s

Evaluation:
[Epoch 17]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.3340]	68.7+18.1s
[36000/50000]	[L1: 38.3025]	68.7+18.1s

Evaluation:
[Epoch 18]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.7040]	68.6+18.2s
[36000/50000]	[L1: 37.7755]	68.7+18.2s

Evaluation:
[Epoch 19]	Learning rate: 1.00e-4
[18000/50000]	[L1: 38.0941]	68.7+18.0s
[36000/50000]	[L1: 37.9704]	68.7+18.0s

Evaluation:
[Epoch 20]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.7516]	68.7+18.0s
[36000/50000]	[L1: 37.6548]	68.7+18.0s

Evaluation:
[TEST x5]	PSNR: 32.8972 SSIM: 0.8574 (Best: 32.8972 0.8574 @epoch 19)
Total time: 1248.67s

[Epoch 21]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.6259]	68.5+18.9s
[36000/50000]	[L1: 37.7077]	68.7+19.3s

Evaluation:
[Epoch 22]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.3264]	68.8+18.1s
[36000/50000]	[L1: 37.4339]	69.0+18.2s

Evaluation:
[Epoch 23]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.1312]	68.6+18.1s
[36000/50000]	[L1: 37.1337]	68.7+18.1s

Evaluation:
[Epoch 24]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.2502]	68.6+18.4s
[36000/50000]	[L1: 37.2822]	68.5+18.4s

Evaluation:
[Epoch 25]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.0772]	68.6+18.1s
[36000/50000]	[L1: 37.1579]	68.6+18.3s

Evaluation:
[Epoch 26]	Learning rate: 1.00e-4
[18000/50000]	[L1: 37.0197]	68.6+18.1s
[36000/50000]	[L1: 36.8336]	68.6+18.1s

Evaluation:
[Epoch 27]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.9296]	68.7+18.0s
[36000/50000]	[L1: 36.7486]	68.6+18.1s

Evaluation:
[Epoch 28]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.4169]	68.5+18.1s
[36000/50000]	[L1: 36.6720]	68.5+18.2s

Evaluation:
[Epoch 29]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.6146]	68.5+18.3s
[36000/50000]	[L1: 36.5624]	68.5+18.1s

Evaluation:
[Epoch 30]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.4969]	68.5+18.2s
[36000/50000]	[L1: 36.4954]	68.5+18.3s

Evaluation:
[TEST x5]	PSNR: 33.1377 SSIM: 0.8610 (Best: 33.1377 0.8610 @epoch 29)
Total time: 1257.92s

[Epoch 31]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.8906]	68.8+19.0s
[36000/50000]	[L1: 36.5230]	69.0+18.9s

Evaluation:
[Epoch 32]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.4387]	68.9+18.1s
[36000/50000]	[L1: 36.5346]	68.9+18.4s

Evaluation:
[Epoch 33]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.4770]	69.1+18.1s
[36000/50000]	[L1: 36.2222]	69.1+18.2s

Evaluation:
[Epoch 34]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.2757]	68.9+17.9s
[36000/50000]	[L1: 36.3716]	69.0+18.4s

Evaluation:
[Epoch 35]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.1686]	69.0+18.2s
[36000/50000]	[L1: 35.9875]	69.0+18.3s

Evaluation:
[Epoch 36]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.9231]	68.9+18.4s
[36000/50000]	[L1: 35.9767]	68.9+18.3s

Evaluation:
[Epoch 37]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.1125]	68.9+18.4s
[36000/50000]	[L1: 36.4035]	68.9+18.4s

Evaluation:
[Epoch 38]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.9481]	68.9+18.4s
[36000/50000]	[L1: 35.8457]	68.9+18.5s

Evaluation:
[Epoch 39]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.6244]	69.0+18.2s
[36000/50000]	[L1: 35.9356]	69.1+18.3s

Evaluation:
[Epoch 40]	Learning rate: 1.00e-4
[18000/50000]	[L1: 36.2382]	68.9+18.2s
[36000/50000]	[L1: 36.1243]	68.9+18.2s

Evaluation:
[TEST x5]	PSNR: 33.2706 SSIM: 0.8628 (Best: 33.2706 0.8628 @epoch 39)
Total time: 1652.62s

[Epoch 41]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.8629]	68.2+21.4s
[36000/50000]	[L1: 35.9671]	68.6+22.0s

Evaluation:
[Epoch 42]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.3926]	68.8+18.5s
[36000/50000]	[L1: 35.5299]	69.1+19.0s

Evaluation:
[Epoch 43]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.6502]	69.4+21.3s
[36000/50000]	[L1: 35.6163]	69.6+22.8s

Evaluation:
[Epoch 44]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.7622]	69.0+18.2s
[36000/50000]	[L1: 35.6192]	68.9+18.3s

Evaluation:
[Epoch 45]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.4508]	69.1+18.2s
[36000/50000]	[L1: 35.3287]	69.0+18.2s

Evaluation:
[Epoch 46]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.4628]	69.0+18.4s
[36000/50000]	[L1: 35.5551]	69.0+18.2s

Evaluation:
[Epoch 47]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.5867]	69.1+18.2s
[36000/50000]	[L1: 35.3537]	69.0+18.3s

Evaluation:
[Epoch 48]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.9652]	69.1+19.6s
[36000/50000]	[L1: 35.1165]	68.9+18.4s

Evaluation:
[Epoch 49]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.3763]	69.0+18.2s
[36000/50000]	[L1: 35.3205]	69.0+18.2s

Evaluation:
[Epoch 50]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.5039]	69.0+18.2s
[36000/50000]	[L1: 35.4681]	68.9+18.2s

Evaluation:
[TEST x5]	PSNR: 33.4254 SSIM: 0.8652 (Best: 33.4254 0.8652 @epoch 49)
Total time: 1285.31s

[Epoch 51]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.3423]	68.3+18.3s
[36000/50000]	[L1: 35.3722]	68.5+18.2s

Evaluation:
[Epoch 52]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.1516]	68.7+18.3s
[36000/50000]	[L1: 35.2722]	68.6+18.5s

Evaluation:
[Epoch 53]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.1079]	69.0+18.3s
[36000/50000]	[L1: 35.0002]	68.9+18.2s

Evaluation:
[Epoch 54]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.7810]	68.9+18.3s
[36000/50000]	[L1: 35.0391]	69.0+18.4s

Evaluation:
[Epoch 55]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.9482]	69.0+18.7s
[36000/50000]	[L1: 35.0378]	69.0+18.4s

Evaluation:
[Epoch 56]	Learning rate: 1.00e-4
[18000/50000]	[L1: 35.2298]	68.9+18.5s
[36000/50000]	[L1: 35.0188]	68.8+18.4s

Evaluation:
[Epoch 57]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8963]	68.8+18.3s
[36000/50000]	[L1: 35.0334]	68.9+18.3s

Evaluation:
[Epoch 58]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.6001]	69.1+18.9s
[36000/50000]	[L1: 34.9426]	68.9+18.2s

Evaluation:
[Epoch 59]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.8986]	68.8+18.4s
[36000/50000]	[L1: 34.8938]	68.9+18.3s

Evaluation:
[Epoch 60]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.7961]	68.9+18.5s
[36000/50000]	[L1: 34.7850]	69.0+18.3s

Evaluation:
[TEST x5]	PSNR: 33.3635 SSIM: 0.8650 (Best: 33.4254 0.8652 @epoch 49)
Total time: 1280.63s

[Epoch 61]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.7429]	68.1+18.1s
[36000/50000]	[L1: 34.6413]	68.3+18.1s

Evaluation:
[Epoch 62]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.7788]	68.6+18.4s
[36000/50000]	[L1: 34.7403]	69.0+20.2s

Evaluation:
[Epoch 63]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.9902]	69.2+18.9s
[36000/50000]	[L1: 34.6224]	69.5+20.7s

Evaluation:
[Epoch 64]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.6854]	69.6+21.2s
[36000/50000]	[L1: 34.6869]	70.4+26.2s

Evaluation:
[Epoch 65]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.4183]	69.9+25.2s
[36000/50000]	[L1: 34.4874]	69.8+26.1s

Evaluation:
[Epoch 66]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.7611]	70.2+27.1s
[36000/50000]	[L1: 34.6118]	70.3+27.1s

Evaluation:
[Epoch 67]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.5366]	69.3+19.1s
[36000/50000]	[L1: 34.5547]	69.7+24.4s

Evaluation:
[Epoch 68]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.6635]	69.2+21.3s
[36000/50000]	[L1: 34.5813]	69.1+22.2s

Evaluation:
[Epoch 69]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.4250]	68.7+20.6s
[36000/50000]	[L1: 34.3834]	69.0+23.8s

Evaluation:
[Epoch 70]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.4465]	69.1+21.1s
[36000/50000]	[L1: 34.3537]	68.6+21.1s

Evaluation:
[TEST x5]	PSNR: 33.5081 SSIM: 0.8670 (Best: 33.5081 0.8670 @epoch 69)
Total time: 1449.03s

[Epoch 71]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.3706]	68.4+22.9s
[36000/50000]	[L1: 34.2637]	68.6+22.0s

Evaluation:
[Epoch 72]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.0717]	68.7+18.5s
[36000/50000]	[L1: 34.0748]	68.8+18.6s

Evaluation:
[Epoch 73]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.1133]	68.9+18.4s
[36000/50000]	[L1: 34.2365]	68.9+18.2s

Evaluation:
[Epoch 74]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.4753]	68.8+18.6s
[36000/50000]	[L1: 34.2786]	69.0+18.6s

Evaluation:
[Epoch 75]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2469]	69.1+19.3s
[36000/50000]	[L1: 34.1884]	68.8+19.6s

Evaluation:
[Epoch 76]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2954]	68.9+19.0s
[36000/50000]	[L1: 34.2858]	69.1+20.0s

Evaluation:
[Epoch 77]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.1988]	68.8+19.6s
[36000/50000]	[L1: 34.0887]	68.8+19.7s

Evaluation:
[Epoch 78]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2470]	68.9+18.3s
[36000/50000]	[L1: 34.1891]	68.9+18.2s

Evaluation:
[Epoch 79]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2759]	68.9+19.8s
[36000/50000]	[L1: 34.1910]	69.0+20.5s

Evaluation:
[Epoch 80]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.1874]	69.0+19.5s
[36000/50000]	[L1: 34.1044]	68.9+19.4s

Evaluation:
[TEST x5]	PSNR: 33.5996 SSIM: 0.8679 (Best: 33.5996 0.8679 @epoch 79)
Total time: 1392.98s

[Epoch 81]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.9548]	68.4+21.7s
[36000/50000]	[L1: 34.1037]	68.6+22.0s

Evaluation:
[Epoch 82]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.0004]	68.7+18.5s
[36000/50000]	[L1: 34.0922]	68.7+18.5s

Evaluation:
[Epoch 83]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2169]	68.9+18.6s
[36000/50000]	[L1: 34.0862]	68.8+18.6s

Evaluation:
[Epoch 84]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.9460]	68.8+20.5s
[36000/50000]	[L1: 33.9944]	68.7+19.6s

Evaluation:
[Epoch 85]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.0134]	68.6+19.5s
[36000/50000]	[L1: 34.0256]	68.6+19.7s

Evaluation:
[Epoch 86]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.8565]	68.6+18.6s
[36000/50000]	[L1: 33.9715]	69.2+20.3s

Evaluation:
[Epoch 87]	Learning rate: 1.00e-4
[18000/50000]	[L1: 34.2719]	69.2+19.9s
[36000/50000]	[L1: 34.0879]	69.1+19.6s

Evaluation:
[Epoch 88]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.8791]	69.2+19.4s
[36000/50000]	[L1: 33.7818]	69.2+19.4s

Evaluation:
[Epoch 89]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.8278]	69.0+18.8s
[36000/50000]	[L1: 33.8429]	69.1+18.7s

Evaluation:
[Epoch 90]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.7992]	69.0+18.5s
[36000/50000]	[L1: 33.7896]	69.3+19.4s

Evaluation:
[TEST x5]	PSNR: 33.6851 SSIM: 0.8690 (Best: 33.6851 0.8690 @epoch 89)
Total time: 1344.46s

[Epoch 91]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.7346]	68.5+20.6s
[36000/50000]	[L1: 33.8035]	68.7+20.7s

Evaluation:
[Epoch 92]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.7930]	68.7+20.5s
[36000/50000]	[L1: 33.7797]	68.9+21.1s

Evaluation:
[Epoch 93]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.7643]	68.8+18.4s
[36000/50000]	[L1: 33.7366]	68.6+18.3s

Evaluation:
[Epoch 94]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.3759]	68.8+20.4s
[36000/50000]	[L1: 33.5143]	68.6+19.7s

Evaluation:
[Epoch 95]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.5387]	68.7+20.4s
[36000/50000]	[L1: 33.5016]	68.7+19.8s

Evaluation:
[Epoch 96]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.6623]	68.9+18.7s
[36000/50000]	[L1: 33.6220]	68.7+19.5s

Evaluation:
[Epoch 97]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.6971]	68.6+18.7s
[36000/50000]	[L1: 33.7637]	68.7+18.7s

Evaluation:
[Epoch 98]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.7561]	68.6+18.9s
[36000/50000]	[L1: 33.8532]	69.0+20.0s

Evaluation:
[Epoch 99]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.4665]	69.2+19.6s
[36000/50000]	[L1: 33.6024]	69.1+19.1s

Evaluation:
[Epoch 100]	Learning rate: 1.00e-4
[18000/50000]	[L1: 33.4977]	69.1+18.7s
[36000/50000]	[L1: 33.5935]	69.2+19.9s

Evaluation:
[TEST x5]	PSNR: 33.7604 SSIM: 0.8700 (Best: 33.7604 0.8700 @epoch 99)
Total time: 1336.86s

[Epoch 101]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.4540]	68.3+20.1s
[36000/50000]	[L1: 33.3614]	68.6+20.5s

Evaluation:
[Epoch 102]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2324]	68.8+18.4s
[36000/50000]	[L1: 33.3435]	69.0+19.4s

Evaluation:
[Epoch 103]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0980]	68.9+19.6s
[36000/50000]	[L1: 33.3190]	69.1+19.7s

Evaluation:
[Epoch 104]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2237]	68.7+19.2s
[36000/50000]	[L1: 33.3501]	69.1+19.4s

Evaluation:
[Epoch 105]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.1016]	68.7+18.9s
[36000/50000]	[L1: 33.2344]	68.5+19.1s

Evaluation:
[Epoch 106]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.3256]	68.7+18.7s
[36000/50000]	[L1: 33.1775]	68.8+19.7s

Evaluation:
[Epoch 107]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.1953]	68.6+18.7s
[36000/50000]	[L1: 33.1248]	68.6+18.3s

Evaluation:
[Epoch 108]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2688]	68.7+19.1s
[36000/50000]	[L1: 33.2630]	68.6+18.7s

Evaluation:
[Epoch 109]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0681]	68.5+18.9s
[36000/50000]	[L1: 33.0761]	68.4+19.2s

Evaluation:
[Epoch 110]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2037]	68.3+18.6s
[36000/50000]	[L1: 33.2855]	68.5+18.8s

Evaluation:
[TEST x5]	PSNR: 33.7726 SSIM: 0.8703 (Best: 33.7726 0.8703 @epoch 109)
Total time: 1343.45s

[Epoch 111]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.4627]	68.4+20.1s
[36000/50000]	[L1: 33.2919]	68.7+20.2s

Evaluation:
[Epoch 112]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.1521]	68.6+18.6s
[36000/50000]	[L1: 33.2125]	68.8+19.1s

Evaluation:
[Epoch 113]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9330]	68.9+19.2s
[36000/50000]	[L1: 33.0056]	69.1+19.1s

Evaluation:
[Epoch 114]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9620]	69.3+19.9s
[36000/50000]	[L1: 33.0207]	69.4+19.2s

Evaluation:
[Epoch 115]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2766]	69.4+19.1s
[36000/50000]	[L1: 33.1399]	69.3+18.3s

Evaluation:
[Epoch 116]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9509]	69.3+18.3s
[36000/50000]	[L1: 33.0361]	69.4+18.6s

Evaluation:
[Epoch 117]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0295]	69.4+18.8s
[36000/50000]	[L1: 33.0449]	69.4+19.0s

Evaluation:
[Epoch 118]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9540]	69.5+19.2s
[36000/50000]	[L1: 33.0183]	69.3+18.7s

Evaluation:
[Epoch 119]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.3474]	69.0+18.4s
[36000/50000]	[L1: 33.2209]	69.1+18.5s

Evaluation:
[Epoch 120]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.1785]	69.5+19.0s
[36000/50000]	[L1: 33.2175]	69.5+18.7s

Evaluation:
[TEST x5]	PSNR: 33.7676 SSIM: 0.8698 (Best: 33.7726 0.8703 @epoch 109)
Total time: 1315.51s

[Epoch 121]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0495]	68.6+19.3s
[36000/50000]	[L1: 33.1770]	69.0+20.2s

Evaluation:
[Epoch 122]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0389]	68.7+18.2s
[36000/50000]	[L1: 33.1003]	69.2+19.1s

Evaluation:
[Epoch 123]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0901]	69.2+18.8s
[36000/50000]	[L1: 33.0383]	69.2+18.9s

Evaluation:
[Epoch 124]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2054]	69.4+18.4s
[36000/50000]	[L1: 33.0415]	69.4+19.1s

Evaluation:
[Epoch 125]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0981]	69.2+18.8s
[36000/50000]	[L1: 33.1355]	69.3+18.9s

Evaluation:
[Epoch 126]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0450]	69.2+18.5s
[36000/50000]	[L1: 33.0509]	69.2+18.3s

Evaluation:
[Epoch 127]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9729]	69.3+18.3s
[36000/50000]	[L1: 32.8970]	69.3+18.4s

Evaluation:
[Epoch 128]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0268]	69.3+18.4s
[36000/50000]	[L1: 33.0702]	69.4+18.9s

Evaluation:
[Epoch 129]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8620]	69.2+18.4s
[36000/50000]	[L1: 32.8651]	69.4+19.5s

Evaluation:
[Epoch 130]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8992]	69.4+19.4s
[36000/50000]	[L1: 32.9743]	69.4+18.8s

Evaluation:
[TEST x5]	PSNR: 33.8375 SSIM: 0.8708 (Best: 33.8375 0.8708 @epoch 129)
Total time: 1322.65s

[Epoch 131]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8528]	68.5+18.6s
[36000/50000]	[L1: 32.8805]	68.8+18.9s

Evaluation:
[Epoch 132]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9507]	68.7+19.3s
[36000/50000]	[L1: 32.9938]	68.8+19.0s

Evaluation:
[Epoch 133]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7152]	69.0+18.7s
[36000/50000]	[L1: 32.8831]	68.9+18.4s

Evaluation:
[Epoch 134]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9560]	68.8+18.7s
[36000/50000]	[L1: 32.8996]	68.9+18.8s

Evaluation:
[Epoch 135]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9908]	69.0+18.6s
[36000/50000]	[L1: 32.9984]	69.0+18.8s

Evaluation:
[Epoch 136]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0071]	68.8+19.3s
[36000/50000]	[L1: 33.0353]	68.9+18.8s

Evaluation:
[Epoch 137]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9445]	69.0+19.1s
[36000/50000]	[L1: 32.9973]	69.1+18.7s

Evaluation:
[Epoch 138]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8509]	68.8+18.5s
[36000/50000]	[L1: 32.8204]	68.6+19.1s

Evaluation:
[Epoch 139]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7664]	68.6+18.8s
[36000/50000]	[L1: 32.8121]	68.9+19.1s

Evaluation:
[Epoch 140]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.2180]	69.0+18.3s
[36000/50000]	[L1: 32.9266]	68.8+18.8s

Evaluation:
[TEST x5]	PSNR: 33.8644 SSIM: 0.8712 (Best: 33.8644 0.8712 @epoch 139)
Total time: 1320.28s

[Epoch 141]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7117]	68.3+19.5s
[36000/50000]	[L1: 32.8412]	68.5+19.8s

Evaluation:
[Epoch 142]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5955]	69.0+19.5s
[36000/50000]	[L1: 32.7217]	68.9+18.9s

Evaluation:
[Epoch 143]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7613]	68.8+19.3s
[36000/50000]	[L1: 32.8480]	68.9+18.5s

Evaluation:
[Epoch 144]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9866]	68.9+19.1s
[36000/50000]	[L1: 32.9031]	69.0+18.4s

Evaluation:
[Epoch 145]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0170]	69.0+19.1s
[36000/50000]	[L1: 32.9758]	69.0+19.3s

Evaluation:
[Epoch 146]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9240]	69.4+19.1s
[36000/50000]	[L1: 32.9164]	69.4+19.4s

Evaluation:
[Epoch 147]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7045]	69.3+18.3s
[36000/50000]	[L1: 32.7614]	69.4+18.7s

Evaluation:
[Epoch 148]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7048]	69.5+19.2s
[36000/50000]	[L1: 32.7106]	69.4+18.4s

Evaluation:
[Epoch 149]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8116]	69.5+19.7s
[36000/50000]	[L1: 32.7624]	69.3+18.5s

Evaluation:
[Epoch 150]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8077]	69.2+18.4s
[36000/50000]	[L1: 32.8014]	69.2+18.6s

Evaluation:
[TEST x5]	PSNR: 33.8974 SSIM: 0.8714 (Best: 33.8974 0.8714 @epoch 149)
Total time: 1314.90s

[Epoch 151]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7644]	68.4+19.9s
[36000/50000]	[L1: 32.8155]	68.7+19.8s

Evaluation:
[Epoch 152]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9220]	68.7+19.2s
[36000/50000]	[L1: 32.7776]	68.9+19.0s

Evaluation:
[Epoch 153]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8665]	69.0+18.4s
[36000/50000]	[L1: 32.7923]	69.1+19.3s

Evaluation:
[Epoch 154]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7769]	69.0+19.3s
[36000/50000]	[L1: 32.8198]	69.0+19.5s

Evaluation:
[Epoch 155]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8066]	69.0+18.7s
[36000/50000]	[L1: 32.7727]	69.1+18.8s

Evaluation:
[Epoch 156]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4850]	69.0+19.1s
[36000/50000]	[L1: 32.6495]	69.1+18.7s

Evaluation:
[Epoch 157]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4604]	69.0+19.4s
[36000/50000]	[L1: 32.5979]	68.9+19.2s

Evaluation:
[Epoch 158]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7615]	69.1+19.0s
[36000/50000]	[L1: 32.6882]	69.0+18.6s

Evaluation:
[Epoch 159]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6817]	69.0+18.4s
[36000/50000]	[L1: 32.7614]	69.0+18.8s

Evaluation:
[Epoch 160]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8174]	69.2+19.1s
[36000/50000]	[L1: 32.6864]	69.0+18.8s

Evaluation:
[TEST x5]	PSNR: 33.8551 SSIM: 0.8711 (Best: 33.8974 0.8714 @epoch 149)
Total time: 1307.72s

[Epoch 161]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.9132]	68.5+20.3s
[36000/50000]	[L1: 32.7453]	68.5+20.0s

Evaluation:
[Epoch 162]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7516]	68.7+19.0s
[36000/50000]	[L1: 32.7240]	68.8+18.6s

Evaluation:
[Epoch 163]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7343]	68.8+19.3s
[36000/50000]	[L1: 32.7804]	68.7+18.6s

Evaluation:
[Epoch 164]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8100]	69.0+19.1s
[36000/50000]	[L1: 32.7926]	68.9+18.7s

Evaluation:
[Epoch 165]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4556]	68.7+18.5s
[36000/50000]	[L1: 32.4942]	68.7+18.5s

Evaluation:
[Epoch 166]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6112]	68.8+18.8s
[36000/50000]	[L1: 32.6958]	68.8+18.7s

Evaluation:
[Epoch 167]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6709]	68.9+18.8s
[36000/50000]	[L1: 32.6862]	68.9+18.4s

Evaluation:
[Epoch 168]	Learning rate: 5.00e-5
[18000/50000]	[L1: 33.0304]	68.9+18.7s
[36000/50000]	[L1: 32.7098]	68.9+18.6s

Evaluation:
[Epoch 169]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6774]	68.8+18.7s
[36000/50000]	[L1: 32.5836]	68.9+18.4s

Evaluation:
[Epoch 170]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8181]	69.3+18.7s
[36000/50000]	[L1: 32.7224]	69.6+19.8s

Evaluation:
[TEST x5]	PSNR: 33.9751 SSIM: 0.8726 (Best: 33.9751 0.8726 @epoch 169)
Total time: 1313.50s

[Epoch 171]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6608]	68.5+20.4s
[36000/50000]	[L1: 32.5875]	68.5+19.9s

Evaluation:
[Epoch 172]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6507]	68.5+18.9s
[36000/50000]	[L1: 32.6726]	68.7+19.2s

Evaluation:
[Epoch 173]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6018]	68.7+18.4s
[36000/50000]	[L1: 32.6999]	68.8+18.9s

Evaluation:
[Epoch 174]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7446]	68.7+19.2s
[36000/50000]	[L1: 32.6741]	68.7+18.3s

Evaluation:
[Epoch 175]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6109]	68.8+19.0s
[36000/50000]	[L1: 32.5895]	68.9+19.5s

Evaluation:
[Epoch 176]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5660]	68.7+18.9s
[36000/50000]	[L1: 32.6305]	68.8+18.7s

Evaluation:
[Epoch 177]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5696]	68.9+18.8s
[36000/50000]	[L1: 32.5174]	69.2+19.0s

Evaluation:
[Epoch 178]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6132]	68.9+19.3s
[36000/50000]	[L1: 32.6157]	68.8+19.1s

Evaluation:
[Epoch 179]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5114]	69.0+19.2s
[36000/50000]	[L1: 32.5884]	68.9+18.7s

Evaluation:
[Epoch 180]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4623]	68.8+18.4s
[36000/50000]	[L1: 32.5552]	68.8+18.3s

Evaluation:
[TEST x5]	PSNR: 33.9162 SSIM: 0.8718 (Best: 33.9751 0.8726 @epoch 169)
Total time: 1333.67s

[Epoch 181]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5551]	68.3+19.5s
[36000/50000]	[L1: 32.5439]	68.6+20.3s

Evaluation:
[Epoch 182]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4959]	68.5+18.5s
[36000/50000]	[L1: 32.6086]	68.7+19.3s

Evaluation:
[Epoch 183]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5816]	68.7+19.2s
[36000/50000]	[L1: 32.6128]	68.8+18.6s

Evaluation:
[Epoch 184]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8800]	69.2+18.4s
[36000/50000]	[L1: 32.6123]	69.3+19.0s

Evaluation:
[Epoch 185]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5308]	69.2+18.6s
[36000/50000]	[L1: 32.5126]	69.2+19.3s

Evaluation:
[Epoch 186]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4018]	69.3+18.7s
[36000/50000]	[L1: 32.4840]	69.3+18.7s

Evaluation:
[Epoch 187]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5462]	69.3+18.3s
[36000/50000]	[L1: 32.6026]	69.2+18.7s

Evaluation:
[Epoch 188]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4480]	69.0+18.5s
[36000/50000]	[L1: 32.5006]	68.9+19.2s

Evaluation:
[Epoch 189]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.6311]	69.4+18.6s
[36000/50000]	[L1: 32.4188]	69.3+19.3s

Evaluation:
[Epoch 190]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8170]	69.2+18.4s
[36000/50000]	[L1: 32.5992]	69.3+18.8s

Evaluation:
[TEST x5]	PSNR: 33.9235 SSIM: 0.8719 (Best: 33.9751 0.8726 @epoch 169)
Total time: 1327.98s

[Epoch 191]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4342]	68.9+19.9s
[36000/50000]	[L1: 32.5350]	68.9+20.2s

Evaluation:
[Epoch 192]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.8623]	68.8+18.4s
[36000/50000]	[L1: 32.6506]	69.1+19.1s

Evaluation:
[Epoch 193]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5670]	69.1+19.0s
[36000/50000]	[L1: 32.5346]	69.2+19.0s

Evaluation:
[Epoch 194]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4524]	68.7+18.5s
[36000/50000]	[L1: 32.4061]	68.5+18.5s

Evaluation:
[Epoch 195]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.3234]	68.8+18.7s
[36000/50000]	[L1: 32.4345]	68.8+19.5s

Evaluation:
[Epoch 196]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4753]	68.9+18.7s
[36000/50000]	[L1: 32.4770]	68.6+18.8s

Evaluation:
[Epoch 197]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.5753]	68.8+19.1s
[36000/50000]	[L1: 32.4625]	68.7+18.4s

Evaluation:
[Epoch 198]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.7826]	68.7+18.4s
[36000/50000]	[L1: 32.4901]	68.6+18.9s

Evaluation:
[Epoch 199]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.4558]	68.7+18.7s
[36000/50000]	[L1: 32.5395]	68.7+18.6s

Evaluation:
[Epoch 200]	Learning rate: 5.00e-5
[18000/50000]	[L1: 32.3403]	68.6+18.7s
[36000/50000]	[L1: 32.4798]	68.7+19.3s

Evaluation:
[TEST x5]	PSNR: 33.9536 SSIM: 0.8723 (Best: 33.9751 0.8726 @epoch 169)
Total time: 1326.71s

[Epoch 201]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.5292]	68.6+20.4s
[36000/50000]	[L1: 32.3762]	69.1+19.9s

Evaluation:
[Epoch 202]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2192]	69.4+18.8s
[36000/50000]	[L1: 32.1770]	69.4+18.7s

Evaluation:
[Epoch 203]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1367]	69.5+18.8s
[36000/50000]	[L1: 32.2749]	68.9+18.7s

Evaluation:
[Epoch 204]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2927]	68.6+18.4s
[36000/50000]	[L1: 32.3705]	68.8+19.7s

Evaluation:
[Epoch 205]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2967]	68.8+18.4s
[36000/50000]	[L1: 32.3602]	68.8+18.9s

Evaluation:
[Epoch 206]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.6054]	68.7+18.8s
[36000/50000]	[L1: 32.3749]	68.7+18.6s

Evaluation:
[Epoch 207]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.4384]	68.8+19.0s
[36000/50000]	[L1: 32.3198]	68.8+18.5s

Evaluation:
[Epoch 208]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3047]	68.8+18.3s
[36000/50000]	[L1: 32.3691]	68.9+18.7s

Evaluation:
[Epoch 209]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.5282]	68.8+18.7s
[36000/50000]	[L1: 32.3917]	68.8+18.9s

Evaluation:
[Epoch 210]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1178]	68.9+19.5s
[36000/50000]	[L1: 32.3669]	68.9+18.8s

Evaluation:
[TEST x5]	PSNR: 33.9670 SSIM: 0.8725 (Best: 33.9751 0.8726 @epoch 169)
Total time: 1310.90s

[Epoch 211]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3393]	68.8+18.7s
[36000/50000]	[L1: 32.3552]	69.0+19.7s

Evaluation:
[Epoch 212]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0229]	68.8+19.9s
[36000/50000]	[L1: 32.2152]	68.5+18.5s

Evaluation:
[Epoch 213]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1777]	68.8+18.6s
[36000/50000]	[L1: 32.2272]	68.7+18.3s

Evaluation:
[Epoch 214]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3664]	68.8+19.2s
[36000/50000]	[L1: 32.3286]	68.7+18.9s

Evaluation:
[Epoch 215]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.4266]	68.9+19.1s
[36000/50000]	[L1: 32.3532]	69.1+19.2s

Evaluation:
[Epoch 216]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.7043]	68.8+18.4s
[36000/50000]	[L1: 32.4276]	68.8+18.4s

Evaluation:
[Epoch 217]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1335]	69.0+18.9s
[36000/50000]	[L1: 32.2601]	69.1+18.7s

Evaluation:
[Epoch 218]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.4466]	69.2+19.9s
[36000/50000]	[L1: 32.4140]	69.2+18.3s

Evaluation:
[Epoch 219]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3511]	69.1+18.5s
[36000/50000]	[L1: 32.3099]	69.2+18.5s

Evaluation:
[Epoch 220]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1763]	69.1+19.5s
[36000/50000]	[L1: 32.3633]	69.2+19.1s

Evaluation:
[TEST x5]	PSNR: 34.0048 SSIM: 0.8730 (Best: 34.0048 0.8730 @epoch 219)
Total time: 1325.31s

[Epoch 221]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1978]	68.6+19.0s
[36000/50000]	[L1: 32.1162]	68.5+19.2s

Evaluation:
[Epoch 222]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3360]	68.6+18.6s
[36000/50000]	[L1: 32.1989]	68.6+18.5s

Evaluation:
[Epoch 223]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2433]	68.7+18.7s
[36000/50000]	[L1: 32.3310]	68.7+18.7s

Evaluation:
[Epoch 224]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0783]	68.9+19.1s
[36000/50000]	[L1: 32.1938]	68.8+18.8s

Evaluation:
[Epoch 225]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2945]	68.7+18.6s
[36000/50000]	[L1: 32.2184]	68.6+18.5s

Evaluation:
[Epoch 226]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.4576]	68.8+18.8s
[36000/50000]	[L1: 32.3101]	69.0+18.4s

Evaluation:
[Epoch 227]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2523]	69.0+19.0s
[36000/50000]	[L1: 32.2559]	68.9+18.7s

Evaluation:
[Epoch 228]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1808]	69.1+18.8s
[36000/50000]	[L1: 32.0685]	68.9+19.2s

Evaluation:
[Epoch 229]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3273]	69.0+19.1s
[36000/50000]	[L1: 32.3842]	69.1+18.7s

Evaluation:
[Epoch 230]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3200]	69.0+18.8s
[36000/50000]	[L1: 32.2709]	69.1+18.8s

Evaluation:
[TEST x5]	PSNR: 33.9956 SSIM: 0.8728 (Best: 34.0048 0.8730 @epoch 219)
Total time: 1315.37s

[Epoch 231]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.6905]	68.5+19.0s
[36000/50000]	[L1: 32.4205]	68.5+18.6s

Evaluation:
[Epoch 232]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1743]	68.6+18.3s
[36000/50000]	[L1: 32.1218]	68.6+18.7s

Evaluation:
[Epoch 233]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.5207]	68.8+19.1s
[36000/50000]	[L1: 32.3727]	68.8+19.0s

Evaluation:
[Epoch 234]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1335]	68.8+18.7s
[36000/50000]	[L1: 32.0787]	68.7+18.4s

Evaluation:
[Epoch 235]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2360]	68.7+19.2s
[36000/50000]	[L1: 32.1978]	68.6+18.8s

Evaluation:
[Epoch 236]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3464]	68.5+17.8s
[36000/50000]	[L1: 32.3288]	68.5+17.8s

Evaluation:
[Epoch 237]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3421]	68.5+17.9s
[36000/50000]	[L1: 32.3183]	68.4+17.8s

Evaluation:
[Epoch 238]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1396]	68.3+17.9s
[36000/50000]	[L1: 32.2839]	68.3+18.0s

Evaluation:
[Epoch 239]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9379]	68.4+18.0s
[36000/50000]	[L1: 32.2280]	68.5+17.8s

Evaluation:
[Epoch 240]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2593]	68.3+17.9s
[36000/50000]	[L1: 32.2061]	68.4+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0261 SSIM: 0.8733 (Best: 34.0261 0.8733 @epoch 239)
Total time: 1254.58s

[Epoch 241]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1768]	68.4+17.9s
[36000/50000]	[L1: 32.1249]	68.5+18.0s

Evaluation:
[Epoch 242]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2514]	68.5+18.1s
[36000/50000]	[L1: 32.2927]	68.6+18.1s

Evaluation:
[Epoch 243]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2451]	68.7+18.0s
[36000/50000]	[L1: 32.2231]	68.7+17.9s

Evaluation:
[Epoch 244]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3369]	68.8+17.9s
[36000/50000]	[L1: 32.2159]	68.8+17.8s

Evaluation:
[Epoch 245]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2432]	68.4+18.0s
[36000/50000]	[L1: 32.2341]	68.4+17.8s

Evaluation:
[Epoch 246]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1563]	68.3+17.9s
[36000/50000]	[L1: 32.1456]	68.4+18.0s

Evaluation:
[Epoch 247]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9500]	68.4+17.9s
[36000/50000]	[L1: 32.0933]	68.5+18.0s

Evaluation:
[Epoch 248]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0585]	68.3+17.9s
[36000/50000]	[L1: 32.1943]	68.3+18.0s

Evaluation:
[Epoch 249]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2990]	68.3+18.1s
[36000/50000]	[L1: 32.2670]	68.4+17.9s

Evaluation:
[Epoch 250]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9003]	68.5+17.8s
[36000/50000]	[L1: 32.0330]	68.4+17.8s

Evaluation:
[TEST x5]	PSNR: 33.9832 SSIM: 0.8726 (Best: 34.0261 0.8733 @epoch 239)
Total time: 1250.66s

[Epoch 251]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0351]	68.2+18.0s
[36000/50000]	[L1: 32.1955]	68.4+17.8s

Evaluation:
[Epoch 252]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1204]	68.6+17.9s
[36000/50000]	[L1: 32.0601]	68.7+17.8s

Evaluation:
[Epoch 253]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1345]	68.5+17.9s
[36000/50000]	[L1: 32.2233]	68.4+17.9s

Evaluation:
[Epoch 254]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.4286]	68.2+17.8s
[36000/50000]	[L1: 32.1929]	68.3+17.9s

Evaluation:
[Epoch 255]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.8177]	68.3+17.9s
[36000/50000]	[L1: 32.1185]	68.3+17.8s

Evaluation:
[Epoch 256]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1763]	68.2+17.9s
[36000/50000]	[L1: 32.0753]	68.3+18.0s

Evaluation:
[Epoch 257]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2553]	68.4+17.9s
[36000/50000]	[L1: 32.2637]	68.4+17.8s

Evaluation:
[Epoch 258]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2724]	68.4+17.8s
[36000/50000]	[L1: 32.1393]	68.4+17.8s

Evaluation:
[Epoch 259]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0354]	68.3+17.9s
[36000/50000]	[L1: 32.0572]	68.3+18.0s

Evaluation:
[Epoch 260]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2924]	68.4+17.8s
[36000/50000]	[L1: 32.2483]	68.3+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0447 SSIM: 0.8735 (Best: 34.0447 0.8735 @epoch 259)
Total time: 1260.89s

[Epoch 261]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0993]	68.4+17.9s
[36000/50000]	[L1: 32.1041]	68.8+17.9s

Evaluation:
[Epoch 262]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2119]	68.6+18.0s
[36000/50000]	[L1: 32.2147]	68.5+18.0s

Evaluation:
[Epoch 263]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9742]	68.8+17.9s
[36000/50000]	[L1: 32.1206]	68.8+17.9s

Evaluation:
[Epoch 264]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0848]	68.8+17.9s
[36000/50000]	[L1: 32.2377]	68.8+17.8s

Evaluation:
[Epoch 265]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9563]	68.8+18.0s
[36000/50000]	[L1: 32.0066]	68.8+17.9s

Evaluation:
[Epoch 266]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3406]	68.7+17.9s
[36000/50000]	[L1: 32.1924]	68.7+18.0s

Evaluation:
[Epoch 267]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1954]	68.7+18.0s
[36000/50000]	[L1: 32.2241]	68.7+18.1s

Evaluation:
[Epoch 268]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1522]	68.7+18.0s
[36000/50000]	[L1: 31.9922]	68.7+17.9s

Evaluation:
[Epoch 269]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2545]	68.8+17.9s
[36000/50000]	[L1: 32.1005]	68.8+17.9s

Evaluation:
[Epoch 270]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1880]	68.8+17.9s
[36000/50000]	[L1: 32.0909]	68.8+17.8s

Evaluation:
[TEST x5]	PSNR: 34.0212 SSIM: 0.8732 (Best: 34.0447 0.8735 @epoch 259)
Total time: 1251.03s

[Epoch 271]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1053]	68.4+17.9s
[36000/50000]	[L1: 32.1712]	68.6+18.0s

Evaluation:
[Epoch 272]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0252]	68.6+17.9s
[36000/50000]	[L1: 32.1942]	68.7+17.9s

Evaluation:
[Epoch 273]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0855]	68.7+17.9s
[36000/50000]	[L1: 32.1367]	68.6+18.0s

Evaluation:
[Epoch 274]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.2782]	68.8+17.8s
[36000/50000]	[L1: 32.1206]	68.7+17.9s

Evaluation:
[Epoch 275]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1241]	68.6+17.9s
[36000/50000]	[L1: 32.1212]	68.7+18.0s

Evaluation:
[Epoch 276]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.3288]	68.7+17.9s
[36000/50000]	[L1: 32.1793]	68.8+17.9s

Evaluation:
[Epoch 277]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.8525]	68.8+17.9s
[36000/50000]	[L1: 32.1124]	68.8+17.9s

Evaluation:
[Epoch 278]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0757]	68.7+18.0s
[36000/50000]	[L1: 32.0817]	68.7+17.9s

Evaluation:
[Epoch 279]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9479]	68.7+17.9s
[36000/50000]	[L1: 32.1030]	68.7+18.0s

Evaluation:
[Epoch 280]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9670]	68.7+18.0s
[36000/50000]	[L1: 32.0904]	68.8+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0157 SSIM: 0.8731 (Best: 34.0447 0.8735 @epoch 259)
Total time: 1258.19s

[Epoch 281]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0478]	68.3+18.0s
[36000/50000]	[L1: 32.0604]	68.6+17.9s

Evaluation:
[Epoch 282]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9486]	68.6+17.9s
[36000/50000]	[L1: 32.1079]	68.9+17.8s

Evaluation:
[Epoch 283]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1241]	68.8+18.0s
[36000/50000]	[L1: 32.0550]	68.7+18.0s

Evaluation:
[Epoch 284]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1892]	68.9+17.9s
[36000/50000]	[L1: 32.0842]	68.8+17.9s

Evaluation:
[Epoch 285]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0250]	68.8+17.9s
[36000/50000]	[L1: 31.9721]	68.8+18.0s

Evaluation:
[Epoch 286]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0371]	69.0+17.9s
[36000/50000]	[L1: 31.9941]	68.9+17.9s

Evaluation:
[Epoch 287]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0995]	68.9+18.0s
[36000/50000]	[L1: 31.9380]	68.8+18.0s

Evaluation:
[Epoch 288]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1266]	68.9+17.8s
[36000/50000]	[L1: 32.0812]	68.8+17.9s

Evaluation:
[Epoch 289]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0393]	68.8+17.9s
[36000/50000]	[L1: 32.1392]	68.8+17.9s

Evaluation:
[Epoch 290]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.8088]	68.8+18.0s
[36000/50000]	[L1: 31.9879]	68.8+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0241 SSIM: 0.8733 (Best: 34.0447 0.8735 @epoch 259)
Total time: 1262.61s

[Epoch 291]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9731]	68.1+17.9s
[36000/50000]	[L1: 32.0099]	68.3+17.9s

Evaluation:
[Epoch 292]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0104]	68.5+17.9s
[36000/50000]	[L1: 32.1027]	68.6+17.9s

Evaluation:
[Epoch 293]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9876]	68.5+18.0s
[36000/50000]	[L1: 31.9948]	68.6+17.9s

Evaluation:
[Epoch 294]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.8664]	68.6+17.8s
[36000/50000]	[L1: 31.9846]	68.6+17.9s

Evaluation:
[Epoch 295]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0481]	68.8+18.1s
[36000/50000]	[L1: 32.0194]	68.7+17.9s

Evaluation:
[Epoch 296]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.1826]	68.8+17.9s
[36000/50000]	[L1: 32.0070]	69.0+17.9s

Evaluation:
[Epoch 297]	Learning rate: 2.50e-5
[18000/50000]	[L1: 32.0475]	68.7+17.9s
[36000/50000]	[L1: 31.9852]	68.6+18.0s

Evaluation:
[Epoch 298]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.7972]	68.8+17.8s
[36000/50000]	[L1: 31.9964]	68.9+17.8s

Evaluation:
[Epoch 299]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9168]	69.0+17.9s
[36000/50000]	[L1: 32.0265]	68.8+17.8s

Evaluation:
[Epoch 300]	Learning rate: 2.50e-5
[18000/50000]	[L1: 31.9889]	68.8+17.8s
[36000/50000]	[L1: 32.1262]	69.1+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0265 SSIM: 0.8733 (Best: 34.0447 0.8735 @epoch 259)
Total time: 1256.89s

[Epoch 301]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8644]	68.0+17.9s
[36000/50000]	[L1: 32.1113]	68.2+17.9s

Evaluation:
[Epoch 302]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.4699]	68.4+17.8s
[36000/50000]	[L1: 32.1384]	68.5+17.8s

Evaluation:
[Epoch 303]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0335]	68.6+17.9s
[36000/50000]	[L1: 31.9326]	68.6+17.8s

Evaluation:
[Epoch 304]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9772]	69.0+17.9s
[36000/50000]	[L1: 31.9829]	68.8+18.1s

Evaluation:
[Epoch 305]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0451]	69.0+17.9s
[36000/50000]	[L1: 32.0503]	69.0+17.9s

Evaluation:
[Epoch 306]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0028]	69.0+17.9s
[36000/50000]	[L1: 31.8748]	69.0+17.8s

Evaluation:
[Epoch 307]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1411]	68.9+17.9s
[36000/50000]	[L1: 31.8953]	68.9+18.0s

Evaluation:
[Epoch 308]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8871]	69.0+17.9s
[36000/50000]	[L1: 31.8267]	69.0+17.8s

Evaluation:
[Epoch 309]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9232]	68.9+18.0s
[36000/50000]	[L1: 31.9099]	68.9+18.0s

Evaluation:
[Epoch 310]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0204]	68.9+17.9s
[36000/50000]	[L1: 31.9679]	69.0+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0453 SSIM: 0.8735 (Best: 34.0453 0.8735 @epoch 309)
Total time: 1242.74s

[Epoch 311]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9269]	68.1+17.8s
[36000/50000]	[L1: 31.9339]	68.2+17.9s

Evaluation:
[Epoch 312]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0389]	68.3+17.9s
[36000/50000]	[L1: 32.0318]	68.4+17.8s

Evaluation:
[Epoch 313]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8497]	68.5+17.9s
[36000/50000]	[L1: 31.8184]	68.6+17.8s

Evaluation:
[Epoch 314]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9623]	68.5+18.0s
[36000/50000]	[L1: 32.0578]	68.4+18.0s

Evaluation:
[Epoch 315]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9193]	68.9+17.9s
[36000/50000]	[L1: 31.9190]	69.0+17.8s

Evaluation:
[Epoch 316]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9100]	68.9+17.9s
[36000/50000]	[L1: 31.9101]	68.9+17.9s

Evaluation:
[Epoch 317]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8729]	69.0+17.8s
[36000/50000]	[L1: 31.9205]	69.0+17.9s

Evaluation:
[Epoch 318]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0944]	68.9+18.0s
[36000/50000]	[L1: 32.0127]	68.9+18.0s

Evaluation:
[Epoch 319]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8361]	69.0+17.9s
[36000/50000]	[L1: 31.9478]	68.9+17.8s

Evaluation:
[Epoch 320]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7186]	68.8+18.0s
[36000/50000]	[L1: 31.9216]	68.8+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0496 SSIM: 0.8735 (Best: 34.0496 0.8735 @epoch 319)
Total time: 1254.45s

[Epoch 321]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0115]	67.9+17.9s
[36000/50000]	[L1: 32.0917]	68.4+18.0s

Evaluation:
[Epoch 322]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9752]	68.8+17.9s
[36000/50000]	[L1: 31.9662]	68.8+17.8s

Evaluation:
[Epoch 323]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0642]	68.7+17.8s
[36000/50000]	[L1: 31.9717]	68.7+17.9s

Evaluation:
[Epoch 324]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0262]	68.6+18.0s
[36000/50000]	[L1: 32.0426]	68.6+17.9s

Evaluation:
[Epoch 325]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9685]	68.6+18.0s
[36000/50000]	[L1: 31.8536]	68.5+18.0s

Evaluation:
[Epoch 326]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1410]	68.5+18.0s
[36000/50000]	[L1: 32.0297]	68.5+18.0s

Evaluation:
[Epoch 327]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1038]	68.5+18.1s
[36000/50000]	[L1: 31.9169]	68.5+18.0s

Evaluation:
[Epoch 328]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8566]	68.6+18.0s
[36000/50000]	[L1: 31.8771]	68.6+17.9s

Evaluation:
[Epoch 329]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1903]	68.7+17.9s
[36000/50000]	[L1: 32.0971]	68.6+17.9s

Evaluation:
[Epoch 330]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7255]	68.5+18.0s
[36000/50000]	[L1: 31.9285]	68.5+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0285 SSIM: 0.8732 (Best: 34.0496 0.8735 @epoch 319)
Total time: 1247.47s

[Epoch 331]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7995]	67.9+18.0s
[36000/50000]	[L1: 31.8707]	68.2+18.0s

Evaluation:
[Epoch 332]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0545]	68.6+17.9s
[36000/50000]	[L1: 31.9988]	68.7+17.9s

Evaluation:
[Epoch 333]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9248]	68.6+17.9s
[36000/50000]	[L1: 31.9252]	68.6+18.0s

Evaluation:
[Epoch 334]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1346]	68.4+18.0s
[36000/50000]	[L1: 31.9930]	68.5+18.0s

Evaluation:
[Epoch 335]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8537]	68.6+17.8s
[36000/50000]	[L1: 31.8393]	68.6+17.9s

Evaluation:
[Epoch 336]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1822]	68.6+17.9s
[36000/50000]	[L1: 31.9019]	68.6+18.0s

Evaluation:
[Epoch 337]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8694]	68.6+17.9s
[36000/50000]	[L1: 31.7862]	68.6+17.9s

Evaluation:
[Epoch 338]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8622]	68.7+17.8s
[36000/50000]	[L1: 31.7132]	68.6+17.8s

Evaluation:
[Epoch 339]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0710]	68.5+17.9s
[36000/50000]	[L1: 31.8700]	68.5+18.0s

Evaluation:
[Epoch 340]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8567]	68.7+17.9s
[36000/50000]	[L1: 31.9089]	68.6+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0488 SSIM: 0.8735 (Best: 34.0496 0.8735 @epoch 319)
Total time: 1248.79s

[Epoch 341]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0763]	67.9+17.8s
[36000/50000]	[L1: 31.9574]	68.1+17.9s

Evaluation:
[Epoch 342]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9574]	68.3+18.0s
[36000/50000]	[L1: 31.9993]	68.3+18.0s

Evaluation:
[Epoch 343]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9298]	68.3+18.0s
[36000/50000]	[L1: 31.9758]	68.3+18.1s

Evaluation:
[Epoch 344]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8531]	68.4+18.0s
[36000/50000]	[L1: 31.8637]	68.4+18.1s

Evaluation:
[Epoch 345]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0247]	68.6+17.9s
[36000/50000]	[L1: 32.0091]	68.6+17.8s

Evaluation:
[Epoch 346]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0491]	68.6+17.8s
[36000/50000]	[L1: 31.9519]	68.6+17.8s

Evaluation:
[Epoch 347]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1124]	68.6+18.0s
[36000/50000]	[L1: 31.9163]	68.5+18.0s

Evaluation:
[Epoch 348]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1425]	68.6+17.9s
[36000/50000]	[L1: 31.9927]	68.6+17.9s

Evaluation:
[Epoch 349]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7401]	68.5+18.0s
[36000/50000]	[L1: 31.8912]	68.5+18.0s

Evaluation:
[Epoch 350]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9237]	68.5+18.1s
[36000/50000]	[L1: 31.9032]	68.6+18.1s

Evaluation:
[TEST x5]	PSNR: 34.0530 SSIM: 0.8735 (Best: 34.0530 0.8735 @epoch 349)
Total time: 1256.67s

[Epoch 351]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7654]	67.9+18.0s
[36000/50000]	[L1: 31.8861]	68.3+17.9s

Evaluation:
[Epoch 352]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9195]	68.5+17.8s
[36000/50000]	[L1: 31.9538]	68.6+17.8s

Evaluation:
[Epoch 353]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9104]	68.6+17.9s
[36000/50000]	[L1: 31.9716]	68.6+18.0s

Evaluation:
[Epoch 354]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9490]	68.5+18.0s
[36000/50000]	[L1: 31.9375]	68.8+17.7s

Evaluation:
[Epoch 355]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8868]	68.6+17.9s
[36000/50000]	[L1: 31.9311]	68.6+17.9s

Evaluation:
[Epoch 356]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8544]	68.6+17.8s
[36000/50000]	[L1: 31.9449]	68.6+17.9s

Evaluation:
[Epoch 357]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0567]	68.4+17.9s
[36000/50000]	[L1: 32.0273]	68.4+18.1s

Evaluation:
[Epoch 358]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0174]	68.7+17.9s
[36000/50000]	[L1: 31.8715]	68.6+17.8s

Evaluation:
[Epoch 359]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.6646]	68.5+18.0s
[36000/50000]	[L1: 31.7103]	68.5+18.0s

Evaluation:
[Epoch 360]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.6077]	68.5+18.0s
[36000/50000]	[L1: 31.6638]	68.6+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0411 SSIM: 0.8735 (Best: 34.0530 0.8735 @epoch 349)
Total time: 1253.33s

[Epoch 361]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9916]	68.2+17.9s
[36000/50000]	[L1: 31.9368]	68.2+17.9s

Evaluation:
[Epoch 362]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8468]	68.3+17.8s
[36000/50000]	[L1: 31.8761]	68.4+18.0s

Evaluation:
[Epoch 363]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8869]	68.4+17.9s
[36000/50000]	[L1: 31.9820]	68.4+17.9s

Evaluation:
[Epoch 364]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0485]	68.3+18.0s
[36000/50000]	[L1: 31.9652]	68.3+17.8s

Evaluation:
[Epoch 365]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8625]	68.4+18.0s
[36000/50000]	[L1: 31.9681]	68.4+18.0s

Evaluation:
[Epoch 366]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0093]	68.4+17.9s
[36000/50000]	[L1: 31.8412]	68.5+18.0s

Evaluation:
[Epoch 367]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9753]	68.3+18.0s
[36000/50000]	[L1: 31.8627]	68.4+17.8s

Evaluation:
[Epoch 368]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8897]	68.4+17.8s
[36000/50000]	[L1: 31.8238]	68.5+17.8s

Evaluation:
[Epoch 369]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9974]	68.5+17.9s
[36000/50000]	[L1: 31.9605]	68.5+18.0s

Evaluation:
[Epoch 370]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8526]	68.4+17.9s
[36000/50000]	[L1: 31.8858]	68.4+18.1s

Evaluation:
[TEST x5]	PSNR: 34.0737 SSIM: 0.8738 (Best: 34.0737 0.8738 @epoch 369)
Total time: 1259.83s

[Epoch 371]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9812]	67.8+17.9s
[36000/50000]	[L1: 31.9337]	68.1+18.0s

Evaluation:
[Epoch 372]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.1632]	68.4+18.0s
[36000/50000]	[L1: 31.9738]	68.6+18.0s

Evaluation:
[Epoch 373]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7767]	68.7+17.9s
[36000/50000]	[L1: 31.7796]	68.7+17.9s

Evaluation:
[Epoch 374]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9906]	68.5+18.0s
[36000/50000]	[L1: 31.8281]	68.6+17.9s

Evaluation:
[Epoch 375]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0076]	68.4+18.0s
[36000/50000]	[L1: 31.9417]	68.4+18.0s

Evaluation:
[Epoch 376]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8597]	68.5+18.1s
[36000/50000]	[L1: 31.8875]	68.5+17.9s

Evaluation:
[Epoch 377]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7227]	68.6+18.0s
[36000/50000]	[L1: 31.8598]	68.6+17.8s

Evaluation:
[Epoch 378]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8848]	68.6+17.9s
[36000/50000]	[L1: 31.8548]	68.6+17.9s

Evaluation:
[Epoch 379]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9382]	68.5+17.9s
[36000/50000]	[L1: 31.8941]	68.6+17.9s

Evaluation:
[Epoch 380]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.6283]	68.6+17.8s
[36000/50000]	[L1: 31.8089]	68.7+17.8s

Evaluation:
[TEST x5]	PSNR: 34.0618 SSIM: 0.8737 (Best: 34.0737 0.8738 @epoch 369)
Total time: 1257.70s

[Epoch 381]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0128]	67.7+17.9s
[36000/50000]	[L1: 31.9022]	68.1+18.0s

Evaluation:
[Epoch 382]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9503]	68.4+18.1s
[36000/50000]	[L1: 31.9780]	68.5+18.0s

Evaluation:
[Epoch 383]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9386]	68.7+17.9s
[36000/50000]	[L1: 31.9511]	68.7+17.9s

Evaluation:
[Epoch 384]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0775]	68.6+17.9s
[36000/50000]	[L1: 31.9987]	68.6+17.9s

Evaluation:
[Epoch 385]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8094]	68.6+17.9s
[36000/50000]	[L1: 31.6895]	68.6+17.9s

Evaluation:
[Epoch 386]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8606]	68.6+17.9s
[36000/50000]	[L1: 31.8194]	68.8+17.9s

Evaluation:
[Epoch 387]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8848]	68.5+17.9s
[36000/50000]	[L1: 31.9955]	68.4+17.9s

Evaluation:
[Epoch 388]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.6942]	68.5+17.9s
[36000/50000]	[L1: 31.7499]	68.5+17.9s

Evaluation:
[Epoch 389]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0094]	68.4+17.9s
[36000/50000]	[L1: 31.9090]	68.4+18.0s

Evaluation:
[Epoch 390]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7837]	68.4+18.0s
[36000/50000]	[L1: 31.7593]	68.5+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0544 SSIM: 0.8736 (Best: 34.0737 0.8738 @epoch 369)
Total time: 1255.81s

[Epoch 391]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8292]	68.0+17.8s
[36000/50000]	[L1: 31.8948]	68.2+17.9s

Evaluation:
[Epoch 392]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7259]	68.4+17.8s
[36000/50000]	[L1: 31.8720]	68.5+17.8s

Evaluation:
[Epoch 393]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7770]	68.4+17.8s
[36000/50000]	[L1: 31.8223]	68.4+17.9s

Evaluation:
[Epoch 394]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9542]	68.6+18.6s
[36000/50000]	[L1: 31.8710]	68.5+18.2s

Evaluation:
[Epoch 395]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.8416]	68.3+18.0s
[36000/50000]	[L1: 31.8528]	68.4+17.8s

Evaluation:
[Epoch 396]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.6634]	68.4+17.8s
[36000/50000]	[L1: 31.6843]	68.5+17.9s

Evaluation:
[Epoch 397]	Learning rate: 1.25e-5
[18000/50000]	[L1: 32.0039]	68.4+18.0s
[36000/50000]	[L1: 31.8200]	68.4+18.0s

Evaluation:
[Epoch 398]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9296]	68.5+17.9s
[36000/50000]	[L1: 31.8690]	68.5+17.8s

Evaluation:
[Epoch 399]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.7745]	68.5+17.8s
[36000/50000]	[L1: 31.7657]	68.5+17.8s

Evaluation:
[Epoch 400]	Learning rate: 1.25e-5
[18000/50000]	[L1: 31.9079]	68.5+17.9s
[36000/50000]	[L1: 31.8532]	68.5+17.8s

Evaluation:
[TEST x5]	PSNR: 34.0707 SSIM: 0.8738 (Best: 34.0737 0.8738 @epoch 369)
Total time: 1277.01s

[Epoch 401]	Learning rate: 6.25e-6
[18000/50000]	[L1: 32.1195]	68.0+17.9s
[36000/50000]	[L1: 31.8001]	68.2+17.8s

Evaluation:
[Epoch 402]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9863]	68.5+17.8s
[36000/50000]	[L1: 31.9921]	68.6+17.8s

Evaluation:
[Epoch 403]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6350]	68.7+17.9s
[36000/50000]	[L1: 31.7823]	68.7+17.9s

Evaluation:
[Epoch 404]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7242]	68.6+18.0s
[36000/50000]	[L1: 31.6740]	68.5+18.1s

Evaluation:
[Epoch 405]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7511]	68.7+17.9s
[36000/50000]	[L1: 31.6549]	68.7+17.9s

Evaluation:
[Epoch 406]	Learning rate: 6.25e-6
[18000/50000]	[L1: 32.0588]	68.6+17.8s
[36000/50000]	[L1: 31.8812]	68.5+17.9s

Evaluation:
[Epoch 407]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7668]	68.4+18.0s
[36000/50000]	[L1: 31.8389]	68.4+18.0s

Evaluation:
[Epoch 408]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9118]	68.6+17.9s
[36000/50000]	[L1: 31.8381]	68.7+17.9s

Evaluation:
[Epoch 409]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8503]	68.4+18.0s
[36000/50000]	[L1: 31.8203]	68.5+18.0s

Evaluation:
[Epoch 410]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7110]	68.5+18.1s
[36000/50000]	[L1: 31.6637]	68.5+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0626 SSIM: 0.8736 (Best: 34.0737 0.8738 @epoch 369)
Total time: 1278.30s

[Epoch 411]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7151]	67.7+17.9s
[36000/50000]	[L1: 31.7079]	68.1+17.9s

Evaluation:
[Epoch 412]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7683]	68.3+17.9s
[36000/50000]	[L1: 31.7215]	68.4+17.8s

Evaluation:
[Epoch 413]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7511]	68.3+18.0s
[36000/50000]	[L1: 31.7810]	68.3+18.0s

Evaluation:
[Epoch 414]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8398]	68.5+17.9s
[36000/50000]	[L1: 31.8063]	68.5+17.9s

Evaluation:
[Epoch 415]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9282]	68.4+17.9s
[36000/50000]	[L1: 31.8611]	68.3+18.0s

Evaluation:
[Epoch 416]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9110]	68.5+17.9s
[36000/50000]	[L1: 31.8479]	68.5+17.9s

Evaluation:
[Epoch 417]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5813]	68.4+17.9s
[36000/50000]	[L1: 31.7215]	68.3+18.0s

Evaluation:
[Epoch 418]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5085]	68.5+17.8s
[36000/50000]	[L1: 31.7185]	68.4+17.9s

Evaluation:
[Epoch 419]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6990]	68.4+17.9s
[36000/50000]	[L1: 31.7495]	68.3+17.9s

Evaluation:
[Epoch 420]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7727]	68.3+18.0s
[36000/50000]	[L1: 31.7792]	68.4+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0854 SSIM: 0.8740 (Best: 34.0854 0.8740 @epoch 419)
Total time: 1263.74s

[Epoch 421]	Learning rate: 6.25e-6
[18000/50000]	[L1: 32.0570]	67.9+17.8s
[36000/50000]	[L1: 31.8287]	68.1+17.8s

Evaluation:
[Epoch 422]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6625]	68.5+17.9s
[36000/50000]	[L1: 31.7374]	68.5+17.8s

Evaluation:
[Epoch 423]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8773]	68.6+17.9s
[36000/50000]	[L1: 31.8624]	68.6+17.9s

Evaluation:
[Epoch 424]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8019]	68.6+17.9s
[36000/50000]	[L1: 31.7646]	68.5+18.0s

Evaluation:
[Epoch 425]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9314]	68.5+18.0s
[36000/50000]	[L1: 31.7595]	68.5+18.0s

Evaluation:
[Epoch 426]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8780]	68.5+18.1s
[36000/50000]	[L1: 31.8822]	68.7+18.0s

Evaluation:
[Epoch 427]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6446]	68.5+17.9s
[36000/50000]	[L1: 31.7294]	68.6+17.9s

Evaluation:
[Epoch 428]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7346]	68.5+17.9s
[36000/50000]	[L1: 31.7447]	68.6+17.8s

Evaluation:
[Epoch 429]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7134]	68.4+17.9s
[36000/50000]	[L1: 31.7689]	68.4+18.1s

Evaluation:
[Epoch 430]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6500]	68.6+18.0s
[36000/50000]	[L1: 31.6661]	68.5+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0753 SSIM: 0.8738 (Best: 34.0854 0.8740 @epoch 419)
Total time: 1272.76s

[Epoch 431]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5620]	67.8+17.9s
[36000/50000]	[L1: 31.8145]	68.3+17.9s

Evaluation:
[Epoch 432]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8904]	68.5+17.9s
[36000/50000]	[L1: 31.8063]	68.5+18.0s

Evaluation:
[Epoch 433]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9042]	68.6+17.9s
[36000/50000]	[L1: 31.8214]	68.7+17.9s

Evaluation:
[Epoch 434]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5045]	68.5+17.9s
[36000/50000]	[L1: 31.6580]	68.5+17.8s

Evaluation:
[Epoch 435]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8403]	68.5+18.0s
[36000/50000]	[L1: 31.8271]	68.4+17.9s

Evaluation:
[Epoch 436]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7500]	68.5+17.8s
[36000/50000]	[L1: 31.7305]	68.5+17.9s

Evaluation:
[Epoch 437]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7358]	68.6+17.9s
[36000/50000]	[L1: 31.6860]	68.6+17.9s

Evaluation:
[Epoch 438]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8322]	68.5+18.0s
[36000/50000]	[L1: 31.8508]	68.4+18.8s

Evaluation:
[Epoch 439]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9102]	68.6+18.1s
[36000/50000]	[L1: 31.9318]	68.6+17.8s

Evaluation:
[Epoch 440]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7926]	68.5+18.0s
[36000/50000]	[L1: 31.7496]	68.5+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0391 SSIM: 0.8734 (Best: 34.0854 0.8740 @epoch 419)
Total time: 1269.94s

[Epoch 441]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7995]	68.1+18.0s
[36000/50000]	[L1: 31.7742]	68.3+18.0s

Evaluation:
[Epoch 442]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8053]	68.6+17.8s
[36000/50000]	[L1: 31.7686]	68.7+17.9s

Evaluation:
[Epoch 443]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7357]	68.6+17.8s
[36000/50000]	[L1: 31.7698]	68.7+17.8s

Evaluation:
[Epoch 444]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7903]	68.6+17.9s
[36000/50000]	[L1: 31.8532]	68.6+17.9s

Evaluation:
[Epoch 445]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6110]	68.5+17.9s
[36000/50000]	[L1: 31.7365]	68.4+18.0s

Evaluation:
[Epoch 446]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8746]	68.5+18.0s
[36000/50000]	[L1: 31.8412]	68.6+18.0s

Evaluation:
[Epoch 447]	Learning rate: 6.25e-6
[18000/50000]	[L1: 32.1545]	68.6+17.9s
[36000/50000]	[L1: 31.8555]	68.6+17.9s

Evaluation:
[Epoch 448]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7324]	68.5+17.9s
[36000/50000]	[L1: 31.6836]	68.5+18.0s

Evaluation:
[Epoch 449]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7234]	68.6+17.8s
[36000/50000]	[L1: 31.8080]	68.6+17.8s

Evaluation:
[Epoch 450]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5172]	68.5+18.0s
[36000/50000]	[L1: 31.7499]	68.5+18.0s

Evaluation:
[TEST x5]	PSNR: 34.0935 SSIM: 0.8741 (Best: 34.0935 0.8741 @epoch 449)
Total time: 1262.92s

[Epoch 451]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8610]	67.8+17.9s
[36000/50000]	[L1: 31.9079]	68.2+18.1s

Evaluation:
[Epoch 452]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7734]	68.4+18.0s
[36000/50000]	[L1: 31.8307]	68.5+18.0s

Evaluation:
[Epoch 453]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7915]	68.5+18.0s
[36000/50000]	[L1: 31.7552]	68.6+18.0s

Evaluation:
[Epoch 454]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6887]	68.6+18.0s
[36000/50000]	[L1: 31.8113]	68.6+17.9s

Evaluation:
[Epoch 455]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5726]	68.7+17.8s
[36000/50000]	[L1: 31.7031]	68.6+17.8s

Evaluation:
[Epoch 456]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9097]	68.5+17.9s
[36000/50000]	[L1: 31.8585]	68.4+18.0s

Evaluation:
[Epoch 457]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7332]	68.6+17.9s
[36000/50000]	[L1: 31.7522]	68.6+17.8s

Evaluation:
[Epoch 458]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7728]	68.5+17.9s
[36000/50000]	[L1: 31.7175]	68.5+18.1s

Evaluation:
[Epoch 459]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6858]	68.5+18.0s
[36000/50000]	[L1: 31.6285]	68.6+17.9s

Evaluation:
[Epoch 460]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6814]	68.6+17.8s
[36000/50000]	[L1: 31.7563]	68.6+17.8s

Evaluation:
[TEST x5]	PSNR: 34.0942 SSIM: 0.8740 (Best: 34.0942 0.8740 @epoch 459)
Total time: 1261.16s

[Epoch 461]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8066]	68.0+17.8s
[36000/50000]	[L1: 31.6248]	68.2+17.8s

Evaluation:
[Epoch 462]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.4720]	68.3+18.0s
[36000/50000]	[L1: 31.6042]	68.4+17.9s

Evaluation:
[Epoch 463]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7996]	68.4+17.7s
[36000/50000]	[L1: 31.6846]	68.5+17.9s

Evaluation:
[Epoch 464]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7916]	68.7+17.9s
[36000/50000]	[L1: 31.7541]	68.7+17.9s

Evaluation:
[Epoch 465]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7508]	68.7+17.9s
[36000/50000]	[L1: 31.8838]	68.7+17.9s

Evaluation:
[Epoch 466]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7335]	68.8+17.9s
[36000/50000]	[L1: 31.7932]	68.6+18.0s

Evaluation:
[Epoch 467]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7937]	68.9+17.9s
[36000/50000]	[L1: 31.7722]	68.7+17.8s

Evaluation:
[Epoch 468]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8363]	68.5+17.9s
[36000/50000]	[L1: 31.8188]	68.5+18.1s

Evaluation:
[Epoch 469]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7086]	68.7+18.1s
[36000/50000]	[L1: 31.6803]	68.7+17.9s

Evaluation:
[Epoch 470]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6502]	68.7+17.9s
[36000/50000]	[L1: 31.7201]	68.7+17.8s

Evaluation:
[TEST x5]	PSNR: 34.0885 SSIM: 0.8741 (Best: 34.0942 0.8740 @epoch 459)
Total time: 1265.95s

[Epoch 471]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7973]	67.9+17.9s
[36000/50000]	[L1: 31.6901]	68.4+17.8s

Evaluation:
[Epoch 472]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.5367]	68.6+17.9s
[36000/50000]	[L1: 31.5611]	68.6+17.9s

Evaluation:
[Epoch 473]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6049]	68.6+18.0s
[36000/50000]	[L1: 31.7703]	68.5+17.9s

Evaluation:
[Epoch 474]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8691]	68.6+18.0s
[36000/50000]	[L1: 31.8348]	68.5+17.9s

Evaluation:
[Epoch 475]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8881]	68.6+17.9s
[36000/50000]	[L1: 31.8902]	68.6+17.9s

Evaluation:
[Epoch 476]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7707]	68.5+18.0s
[36000/50000]	[L1: 31.7176]	68.5+18.0s

Evaluation:
[Epoch 477]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9376]	68.6+17.9s
[36000/50000]	[L1: 31.7653]	68.6+17.8s

Evaluation:
[Epoch 478]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8516]	68.6+17.8s
[36000/50000]	[L1: 31.8026]	68.6+17.9s

Evaluation:
[Epoch 479]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6669]	68.6+18.0s
[36000/50000]	[L1: 31.6385]	68.5+18.0s

Evaluation:
[Epoch 480]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8593]	68.6+17.9s
[36000/50000]	[L1: 31.7923]	68.6+17.9s

Evaluation:
[TEST x5]	PSNR: 34.1058 SSIM: 0.8743 (Best: 34.1058 0.8743 @epoch 479)
Total time: 1263.48s

[Epoch 481]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7642]	68.0+17.8s
[36000/50000]	[L1: 31.6696]	68.3+17.8s

Evaluation:
[Epoch 482]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8606]	68.2+18.0s
[36000/50000]	[L1: 31.8172]	68.2+18.0s

Evaluation:
[Epoch 483]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7898]	68.4+17.9s
[36000/50000]	[L1: 31.6935]	68.5+17.9s

Evaluation:
[Epoch 484]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6968]	68.8+17.9s
[36000/50000]	[L1: 31.7267]	68.6+18.1s

Evaluation:
[Epoch 485]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.6589]	68.6+17.9s
[36000/50000]	[L1: 31.6349]	68.6+17.9s

Evaluation:
[Epoch 486]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7996]	68.5+17.9s
[36000/50000]	[L1: 31.7808]	68.5+18.1s

Evaluation:
[Epoch 487]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9074]	68.5+18.0s
[36000/50000]	[L1: 31.7227]	68.5+18.1s

Evaluation:
[Epoch 488]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8637]	68.5+17.9s
[36000/50000]	[L1: 31.7560]	68.5+17.9s

Evaluation:
[Epoch 489]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8196]	68.6+17.9s
[36000/50000]	[L1: 31.7931]	68.6+17.9s

Evaluation:
[Epoch 490]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.4581]	68.6+17.9s
[36000/50000]	[L1: 31.5820]	68.7+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0787 SSIM: 0.8739 (Best: 34.1058 0.8743 @epoch 479)
Total time: 1263.14s

[Epoch 491]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8183]	68.0+17.9s
[36000/50000]	[L1: 31.7778]	68.1+18.0s

Evaluation:
[Epoch 492]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8740]	68.6+17.9s
[36000/50000]	[L1: 31.7138]	68.6+17.9s

Evaluation:
[Epoch 493]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7544]	68.6+18.1s
[36000/50000]	[L1: 31.6524]	68.6+18.0s

Evaluation:
[Epoch 494]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7401]	68.7+17.9s
[36000/50000]	[L1: 31.7459]	68.5+17.9s

Evaluation:
[Epoch 495]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7715]	68.5+17.9s
[36000/50000]	[L1: 31.8261]	68.5+17.9s

Evaluation:
[Epoch 496]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7983]	68.5+18.0s
[36000/50000]	[L1: 31.6997]	68.6+18.0s

Evaluation:
[Epoch 497]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.7536]	68.6+17.8s
[36000/50000]	[L1: 31.8217]	68.6+17.9s

Evaluation:
[Epoch 498]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.4498]	68.5+18.0s
[36000/50000]	[L1: 31.7394]	68.6+18.0s

Evaluation:
[Epoch 499]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.8100]	68.5+17.9s
[36000/50000]	[L1: 31.6873]	68.5+18.0s

Evaluation:
[Epoch 500]	Learning rate: 6.25e-6
[18000/50000]	[L1: 31.9704]	68.5+18.0s
[36000/50000]	[L1: 31.6910]	68.6+17.9s

Evaluation:
[TEST x5]	PSNR: 34.0883 SSIM: 0.8740 (Best: 34.1058 0.8743 @epoch 479)
Total time: 1266.72s

